<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>论文研读 on Leon&#39;s Blog</title>
    <link>https://byteflow777.github.io/docs/Paper/</link>
    <description>Recent content in 论文研读 on Leon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://byteflow777.github.io/docs/Paper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式一致性算法 - Raft</title>
      <link>https://byteflow777.github.io/docs/Paper/Raft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/Paper/Raft/</guid>
      <description>分布式一致性算法 - Raft #  Raft 算法是 Stanford University 的 Diego Ongaro 的博士论文，是分布式一致性算法的一种，相比于 Paxos 算法更易于理解，使用该技术的项目有：TiKV, etcd, Cockroach 等
官方地址：https://raft.github.io/
 时间 (Terms) #  分布式系统中节点的时间是不可靠的，如不采取特殊硬件，节点与节点之间时间是存在一定的误差。如果采用时间作为判断操作的先后顺序，即使是很细微的误差仍然会导致判断的失效。
因此 Raft 把时间划分为了不同的 terms（任期），term 类似于逻辑时钟，可以用于判断选举的先后顺序，每次选举开始就会开启一轮新的 term，在 Raft 中可以使用整数类型保存，每次开启一轮新选举时 term + 1。
如果当前节点接收到较大 term 节点的请求，则说明当前节点已经落后于请求的节点，需要转为 Follower 状态，并把当前 term 更新为较大的 term。
 角色 (states) #  Raft 中的节点始终处于 Follower | Candidate | Leader 三种状态中的一种，不同状态之间根据不同的触发条件进行相互转换。
  跟随者 (Follower) ：当节点启动后，节点为 Follower 状态，在一定时间内（300~500ms）如果没有收到来自 Leader 的心跳包则会转为 Candidate 状态 候选者 (Candidate) ：转为 Candidate 状态后，Candidate 会给集群中的其它节点（不包含自己）发送投票请求，请求获取投票。如果集群中超过一半的节点同意该投票请求，该 Candidate 节点就会转为 Leader 状态 领导者 (Leader) ：当节点转为 Leader 状态后，会定时给集群中的所有节点发送心跳包，维护其 Leader 状态。Leader 节点会处理来自 clients 的所有请求，当集群中处于其它状态的节点接收到来自 clients 的请求后，会转发给 Leader 进行处理  保证一致性 #  Raft 把保证一致性问题分为三个相对独立的子问题：</description>
    </item>
    
  </channel>
</rss>
