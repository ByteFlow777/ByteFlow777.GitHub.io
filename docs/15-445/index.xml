<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>15-445 on Leon' Blog</title><link>https://ileonli.github.io/docs/15-445/</link><description>Recent content in 15-445 on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/15-445/index.xml" rel="self" type="application/rss+xml"/><item><title>Database Storage</title><link>https://ileonli.github.io/docs/15-445/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/15-445/storage/</guid><description>&lt;h1 id="database-storage">
 Database Storage
 &lt;a class="anchor" href="#database-storage">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>
 &lt;a href="https://15445.courses.cs.cmu.edu/fall2023/slides/03-storage1.pdf">https://15445.courses.cs.cmu.edu/fall2023/slides/03-storage1.pdf&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>DBMS 假设数据库主要使用的存储是非易失的（non-volatile）。DBMS 主要工作之一为：管理数据在易失存储设备和非易失存储设备之间的移动。&lt;/p>
&lt;h2 id="基于磁盘的结构">
 基于磁盘的结构
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8e%e7%a3%81%e7%9b%98%e7%9a%84%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;h3 id="存储结构">
 存储结构
 &lt;a class="anchor" href="#%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h3>
&lt;p>对于存储设备来说：&lt;strong>速度越快-&amp;gt;价钱昂贵&lt;/strong>，&lt;strong>速度越慢-&amp;gt;价格便宜&lt;/strong>。因此，要在价格和速度之间进行一部分取舍。&lt;/p>
&lt;p>主流的做法为，采用速度更快的存储设备作为底层设备的缓存。&lt;/p>
&lt;blockquote>
&lt;p>此课程只关注非易失存储设备&lt;/p>
&lt;/blockquote>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/6.jpg" alt="" />&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/7.jpg" alt="" />&lt;/p>
&lt;hr>
&lt;p>Intel 开发了 Optane 非易失存储设备，可以提供类似内存的速度和易失性（volatile），但又具有非易失性的特性（non-volatile）。这意味着数据在断电时仍然保持不变，适合用于需要快速恢复状态的应用场景，如数据库和日志记录。&lt;/p>
&lt;blockquote>
&lt;p>由于此业务不赚钱，Intel 已经终止了此设备的研发&lt;/p>
&lt;/blockquote>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/11.jpg" alt="" />&lt;/p>
&lt;h3 id="访问时间">
 访问时间
 &lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e6%97%b6%e9%97%b4">#&lt;/a>
&lt;/h3>
&lt;p>不同存储设备的延迟对比如下：&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/16.jpg" alt="" />&lt;/p>
&lt;h3 id="随机和顺序读取">
 随机和顺序读取
 &lt;a class="anchor" href="#%e9%9a%8f%e6%9c%ba%e5%92%8c%e9%a1%ba%e5%ba%8f%e8%af%bb%e5%8f%96">#&lt;/a>
&lt;/h3>
&lt;p>在&lt;strong>非易失存储设备&lt;/strong>上进行随机读取（random access）比顺序读取（sequential access）慢的多。&lt;/p>
&lt;p>为了充分利用顺序读取速度较快的优势，DBMS 可以使用下边的优化方法：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>减少写入随机页面的次数&lt;/strong>：尝试减少对随机存储页面（即内存或磁盘上的页面）的写操作次数。这样做的目的是让数据能够存储在连续的块中。连续的存储块更有利于提高数据的访问速度，因为读取连续的数据比读取散乱分布的数据效率更高。这种优化有助于提高存储系统的性能，特别是在磁盘 I/O 操作方面。&lt;/li>
&lt;li>&lt;strong>扩展（Extent）&lt;/strong>：当一次性分配多个页面时，这种分配方式称为&lt;strong>扩展&lt;/strong>。换句话说，一个&lt;strong>扩展&lt;/strong>就是一组连续分配的页面块。通过这种方式，可以更高效地管理存储空间，并进一步确保数据以连续的方式存储，从而提高读写性能。&lt;/li>
&lt;/ol>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/17.jpg" alt="" />&lt;/p>
&lt;h3 id="设计原则">
 设计原则
 &lt;a class="anchor" href="#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">#&lt;/a>
&lt;/h3>
&lt;p>一个良好的 DBMS 应该有以下设计原则：&lt;/p>
&lt;ol>
&lt;li>允许管理的数据库的数据大小超过内存（RAM）。&lt;/li>
&lt;li>尽量减少磁盘读写的次数。&lt;/li>
&lt;li>最大化使用顺序读取，减少随机读取的次数。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>large stalls&lt;/strong>：当磁盘读写操作没有得到有效管理时，尤其是在面对随机访问过多或磁盘 I/O 负载过重的情况下，系统可能会经历长时间的等待，导致处理速度明显变慢。&lt;/p>
&lt;/blockquote>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/18.jpg" alt="" />&lt;/p>
&lt;h3 id="面向磁盘的-dbms">
 面向磁盘的 DBMS
 &lt;a class="anchor" href="#%e9%9d%a2%e5%90%91%e7%a3%81%e7%9b%98%e7%9a%84-dbms">#&lt;/a>
&lt;/h3>
&lt;p>当执行引擎（execution engine）需要获取页（page）时，会尝试从缓冲池（buffer pool）中获取。&lt;/p>
&lt;p>&lt;strong>缓冲池&lt;/strong>作用为：将保存在磁盘中的页加载到内存中，由于内存通常远远小于磁盘大小，需要采用一些算法（如：LRU）来保证页的加载和换出。&lt;/p>
&lt;p>加载到缓冲池中后，我们就可以直接使用此页了。当需要修改数据时，可以直接对内存中的页进行修改，修改后没写回到磁盘的页称为脏页（dirty page）。&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/15445/storage1/19.jpg" alt="" />&lt;/p>
&lt;!-- ### 为什么不使用 OS?

DBMS 可以使用 `mmap` 技术，将文件的内容直接映射到程序的地址空间中。

OS 负责管理文件页面的调度和内存交换，因此 DBMS 不需要直接处理这些细节。

![](/img/15445/storage1/19.jpg)

当访问 `page1` 时，会触发**缺页中断**，将磁盘数据加载到内存中。

![](/img/15445/storage1/20.jpg)

当访问 `page3` 时，会触发**缺页中断**，将磁盘数据加载到内存中。

![](/img/15445/storage1/21.jpg)

---

当物理内存满了后，操作系统会采用**置换算法**将内存中的页换出到磁盘中。

但操作系统不知道内存中的页正在进行的操作，如：正处于事务中的页在事务完成前不应该换出。

![](/img/15445/storage1/22.jpg)

---

当多线程访问 `mmap` 文件时，就会发生一些问题。

![](/img/15445/storage1/23.jpg)

---

使用 `mmap` 会有下边各种各样的问题：

1. **事务安全（Transaction Safety）**：OS 可能在任意时间将脏页刷新磁盘中。
2. **I/O 停顿（I/O Stalls）**：DBMS 不知道有哪些页在内存中，当发生缺页时，OS 会将线程停顿。
3. **错误处理（Error Handling）**：DBMS 必须处理由于访问无效页产生的 `SIGBUS` 信号。
4. **性能问题（Performance Issues）**：会发生 OS 数据结构冲突，TLB 清空。

![](/img/15445/storage1/24.jpg)

---

可以使用 `madvise`、`mlock` 和 `msync` 来解决 `mmap` 带来的问题。

![](/img/15445/storage1/25.jpg)

---

DBMS 会尽可能控制任何事情，可以比 OS 做的更好。

![](/img/15445/storage1/27.jpg)

---

[Are You Sure You Want to Use MMAP in Your Database Management System?](https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf) 介绍了为什么不推荐在 DBMS 中使用 `mmap` 的原因。

![](/img/15445/storage1/28.jpg) -->
&lt;h2 id="文件存储">
 文件存储
 &lt;a class="anchor" href="#%e6%96%87%e4%bb%b6%e5%ad%98%e5%82%a8">#&lt;/a>
&lt;/h2>
&lt;p>DBMS 会将数据库在磁盘上以特有的格式保存为一个或多个文件。&lt;/p></description></item></channel></rss>