<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Leon' Blog</title><link>https://ileonli.github.io/docs/JVM/</link><description>Recent content in JVM on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/JVM/index.xml" rel="self" type="application/rss+xml"/><item><title>AsmTools</title><link>https://ileonli.github.io/docs/JVM/AsmTools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/JVM/AsmTools/</guid><description> AsmTools # AsmTools 官网： AsmTools
编译 AsmTools # GitHub: AsmTools
How To Build AsmTools
使用 # java -jar asmtools.jar jdis [option] [filename.class]
参数 -g 可打印出更详细的信息。</description></item><item><title>JVM 加载 连接 初始化</title><link>https://ileonli.github.io/docs/JVM/loading-linking-initializing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/JVM/loading-linking-initializing/</guid><description>JVM 加载 连接 初始化 # 类加载过程 # 加载（loads） # 加载（loads）是查找具有特定名称的类或接口类型的二进制表示，并从该二进制表示创建类或接口的过程。加载过程如下：
通过一个类的全限定名来获取定义此类的二进制字节流。 将这个字节流所代表的静态存储结构转化为方法区（Method Area）的运行时数据结构。 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。 类加载链接的目的就是在 JVM 中创建相应的类结构
启动类加载器之外，其他的类加载器都是 java.lang.ClassLoader 的子类
-verbose:class 参数可用于打印类加载的先后顺序
连接（links） # 连接（links）是获取类或接口，并将其组合到 Java 虚拟机的运行时状态以便执行的过程。
初始化（initializes） # 类或接口的初始化（initializes）包括执行类或接口初始化方法 &amp;lt;clinit&amp;gt;。
类加载器（class loader） # 启动类加载器（bootstrap class loader）由 C++ 实现，
除了启动类加载器之外，其它的类加载器都是 java.lang.ClassLoader 的子类，因此有对应的 Java 对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至 Java 虚拟机中，方能执行类加载。
双亲委派模型 # JDK 9 前 # 启动类加载器（Bootstrap Class Loader）：用于加载 扩展类加载器（Extension Class Loader）: 应用程序类加载器（Application Class Loader）: 可输出 BootstrapClassLoader 可加载的类。
URLClassPath bootstrapClassPath = Launcher.</description></item></channel></rss>