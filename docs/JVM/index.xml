<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Leon' Blog</title><link>https://ileonli.github.io/docs/JVM/</link><description>Recent content in JVM on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/JVM/index.xml" rel="self" type="application/rss+xml"/><item><title>AsmTools</title><link>https://ileonli.github.io/docs/JVM/AsmTools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/JVM/AsmTools/</guid><description>&lt;h1 id="asmtools">
 AsmTools
 &lt;a class="anchor" href="#asmtools">#&lt;/a>
&lt;/h1>
&lt;p>AsmTools 官网：
 &lt;a href="https://wiki.openjdk.org/display/CodeTools/asmtools">AsmTools&lt;/a>&lt;/p>
&lt;h2 id="编译-asmtools">
 编译 AsmTools
 &lt;a class="anchor" href="#%e7%bc%96%e8%af%91-asmtools">#&lt;/a>
&lt;/h2>
&lt;p>GitHub: 
 &lt;a href="https://github.com/openjdk/asmtools">AsmTools&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://wiki.openjdk.org/display/CodeTools/How&amp;#43;to&amp;#43;build&amp;#43;AsmTools">How To Build AsmTools&lt;/a>&lt;/p>
&lt;h2 id="使用">
 使用
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>java -jar asmtools.jar jdis [option] [filename.class]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>参数 &lt;code>-g&lt;/code> 可打印出更详细的信息。&lt;/li>
&lt;/ul></description></item><item><title>JVM 加载-链接-初始化</title><link>https://ileonli.github.io/docs/JVM/loading-linking-initializing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/JVM/loading-linking-initializing/</guid><description>&lt;h1 id="jvm-加载-链接-初始化">
 JVM 加载-链接-初始化
 &lt;a class="anchor" href="#jvm-%e5%8a%a0%e8%bd%bd-%e9%93%be%e6%8e%a5-%e5%88%9d%e5%a7%8b%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;h2 id="类加载过程">
 类加载过程
 &lt;a class="anchor" href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="加载loads">
 加载（loads）
 &lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bdloads">#&lt;/a>
&lt;/h3>
&lt;p>加载（loads）是查找具有特定名称的类或接口类型的二进制表示，并从该二进制表示创建类或接口的过程。加载过程如下：&lt;/p>
&lt;ol>
&lt;li>通过一个类的全限定名来获取定义此类的二进制字节流。&lt;/li>
&lt;li>将这个字节流所代表的静态存储结构转化为方法区（Method Area）的运行时数据结构。&lt;/li>
&lt;li>在内存中生成一个代表这个类的 &lt;code>java.lang.Class&lt;/code> 对象，作为方法区这个类的各种数据的访问入口。&lt;/li>
&lt;/ol>
&lt;p>类加载链接的目的就是在 JVM 中创建相应的类结构&lt;/p>
&lt;p>启动类加载器之外，其他的类加载器都是 &lt;code>java.lang.ClassLoader&lt;/code> 的子类&lt;/p>
&lt;p>&lt;code>-verbose:class&lt;/code> 参数可用于打印类加载的先后顺序&lt;/p>
&lt;h3 id="链接links">
 链接（links）
 &lt;a class="anchor" href="#%e9%93%be%e6%8e%a5links">#&lt;/a>
&lt;/h3>
&lt;p>链接（links）是获取类或接口，并将其组合到 Java 虚拟机的运行时状态以便执行的过程。&lt;/p>
&lt;h3 id="初始化initializes">
 初始化（initializes）
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96initializes">#&lt;/a>
&lt;/h3>
&lt;p>类或接口的初始化（initializes）包括执行类或接口初始化方法 &lt;code>&amp;lt;clinit&amp;gt;&lt;/code>。&lt;/p>
&lt;h2 id="类加载器class-loader">
 类加载器（class loader）
 &lt;a class="anchor" href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8class-loader">#&lt;/a>
&lt;/h2>
&lt;p>启动类加载器（bootstrap class loader）由 C++ 实现，&lt;/p>
&lt;p>除了启动类加载器之外，其它的类加载器都是 &lt;code>java.lang.ClassLoader&lt;/code> 的子类，因此有对应的 Java 对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至 Java 虚拟机中，方能执行类加载。&lt;/p>
&lt;h2 id="双亲委派模型">
 双亲委派模型
 &lt;a class="anchor" href="#%e5%8f%8c%e4%ba%b2%e5%a7%94%e6%b4%be%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="jdk-9-前">
 JDK 9 前
 &lt;a class="anchor" href="#jdk-9-%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>启动类加载器（Bootstrap Class Loader）：用于加载&lt;/li>
&lt;li>扩展类加载器（Extension Class Loader）:&lt;/li>
&lt;li>应用程序类加载器（Application Class Loader）:&lt;/li>
&lt;/ul>
&lt;p>可输出 &lt;code>BootstrapClassLoader&lt;/code> 可加载的类。&lt;/p></description></item></channel></rss>