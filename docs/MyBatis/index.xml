<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MyBatis on Leon' Blog</title><link>https://ileonli.github.io/docs/MyBatis/</link><description>Recent content in MyBatis on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/MyBatis/index.xml" rel="self" type="application/rss+xml"/><item><title>SqlSession</title><link>https://ileonli.github.io/docs/MyBatis/SqlSession/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/SqlSession/</guid><description>&lt;h1 id="sqlsession">
 SqlSession
 &lt;a class="anchor" href="#sqlsession">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>SalSession&lt;/code> 是用于操作数据库的接口，具体的操作都通过此接口。&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/MyBatis/SqlSession.png" alt="" />&lt;/p>
&lt;h2 id="sqlsessionfactorybuilder">
 SqlSessionFactoryBuilder
 &lt;a class="anchor" href="#sqlsessionfactorybuilder">#&lt;/a>
&lt;/h2>
&lt;p>此类可以被实例化、使用和丢弃，一旦使用此类创建了 &lt;code>SqlSessionFactory&lt;/code>，后续就不需要使用此类了。因此 &lt;code>SqlSessionFactoryBuilder&lt;/code> 实例的最佳作用域是方法作用域（也就是局部方法变量）。&lt;/p>
&lt;p>可以重用 &lt;code>SqlSessionFactoryBuilder&lt;/code> 来创建多个 &lt;code>SqlSessionFactory&lt;/code> 实例，但最好还是不要一直保留着它，以保证 XML 资源可以被释放。&lt;/p>
&lt;h2 id="sqlsessionfactory">
 SqlSessionFactory
 &lt;a class="anchor" href="#sqlsessionfactory">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>SqlSessionFactory&lt;/code> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。使用 &lt;code>SqlSessionFactory&lt;/code> 的最佳实践是在应用运行期间只创建一次。&lt;/p>
&lt;hr>
&lt;p>&lt;code>SqlSessionFactory&lt;/code> 的作用是为了创建 &lt;code>SqlSession&lt;/code> 实例。&lt;code>SqlSession&lt;/code> 是 MyBatis 执行 SQL 命令的核心接口，通过此实例可以对数据库进行查询、插入、更新和删除操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.Connection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Creates an {@link SqlSession} out of a connection or a DataSource
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Clinton Begin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SqlSessionFactory&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(&lt;span style="color:#66d9ef">boolean&lt;/span> autoCommit);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(Connection connection);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(TransactionIsolationLevel level);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(ExecutorType execType);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(ExecutorType execType, &lt;span style="color:#66d9ef">boolean&lt;/span> autoCommit);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(ExecutorType execType, TransactionIsolationLevel level);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqlSession &lt;span style="color:#a6e22e">openSession&lt;/span>(ExecutorType execType, Connection connection);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration &lt;span style="color:#a6e22e">getConfiguration&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>&lt;code>SqlSessionFactory&lt;/code> 主要有两个具体的实现：&lt;/p></description></item><item><title>Mapper</title><link>https://ileonli.github.io/docs/MyBatis/Mapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/Mapper/</guid><description>&lt;h1 id="mapper">
 Mapper
 &lt;a class="anchor" href="#mapper">#&lt;/a>
&lt;/h1>
&lt;h2 id="mapperregistry">
 MapperRegistry
 &lt;a class="anchor" href="#mapperregistry">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>MapperRegistry&lt;/code> 是 Mapper 接口及其对应的代理对象工厂的注册中心。&lt;/p>
&lt;p>&lt;code>Configuration&lt;/code> 是 MyBatis 全局性的配置对象，在 MyBatis 初始化的过程中，所有配置信息会被解析成相应的对象并记录到 &lt;code>Configuration&lt;/code> 对象中。&lt;/p>
&lt;h3 id="knownmappers">
 knownMappers
 &lt;a class="anchor" href="#knownmappers">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>MapperRegistry&lt;/code> 类中的 &lt;code>knownMappers&lt;/code> 用做具体保存。&lt;/p>
&lt;p>&lt;code>key&lt;/code> 是 &lt;code>Mapper&lt;/code> 接口对应的 &lt;code>Class&lt;/code> 对象，&lt;code>value&lt;/code> 为 &lt;code>MapperProxyFactory&lt;/code> 工厂对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Class&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span>, MapperProxyFactory&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&amp;gt;&lt;/span> knownMappers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConcurrentHashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="addmapper">
 addMapper
 &lt;a class="anchor" href="#addmapper">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>addMapper&lt;/code> 会将接口类和包装后的对象放入到 &lt;code>knownMappers&lt;/code> 对象中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addMapper&lt;/span>(Class&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> type) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (type.&lt;span style="color:#a6e22e">isInterface&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (hasMapper(type)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BindingException(&lt;span style="color:#e6db74">&amp;#34;Type &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> type &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; is already known to the MapperRegistry.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> loadCompleted &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> knownMappers.&lt;span style="color:#a6e22e">put&lt;/span>(type, &lt;span style="color:#66d9ef">new&lt;/span> MapperProxyFactory&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>(type));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// It&amp;#39;s important that the type is added before the parser is run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// otherwise the binding may automatically be attempted by the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// mapper parser. If the type is already known, it won&amp;#39;t try.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MapperAnnotationBuilder parser &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MapperAnnotationBuilder(config, type);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser.&lt;span style="color:#a6e22e">parse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loadCompleted &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>loadCompleted) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> knownMappers.&lt;span style="color:#a6e22e">remove&lt;/span>(type);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="getmapper">
 getMapper
 &lt;a class="anchor" href="#getmapper">#&lt;/a>
&lt;/h3>
&lt;p>当使用 &lt;code>SqlSession&lt;/code> 类中的 &lt;code>&amp;lt;T&amp;gt; T getMapper(Class&amp;lt;T&amp;gt; type);&lt;/code> 方法获取 Mapper 时，会转发到 &lt;code>MapperRegistry&lt;/code> 的 &lt;code>getMapper&lt;/code> 方法进行具体处理。&lt;/p></description></item><item><title>ResultSetHandler</title><link>https://ileonli.github.io/docs/MyBatis/ResultSetHandler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/ResultSetHandler/</guid><description>&lt;h1 id="resultsethandler">
 ResultSetHandler
 &lt;a class="anchor" href="#resultsethandler">#&lt;/a>
&lt;/h1>
&lt;p>MyBatis 会将 &lt;code>ResultSet&lt;/code> 按照映射配置文件中定义的映射规则（例如 &lt;code>&amp;lt;resultMap&amp;gt;&lt;/code> 节点和 &lt;code>resultType&lt;/code> 属性等）映射成相应的对象。&lt;/p>
&lt;p>在 &lt;code>StatementHandler&lt;/code> 接口执行完指定的 select 语句之后，会将查询得到的 &lt;code>ResultSet&lt;/code> 交给 &lt;code>ResultSetHandler&lt;/code> 完成映射处理。&lt;/p>
&lt;p>&lt;code>ResultSetHandler&lt;/code> 除了负责映射 select 语句查询得到的结果集，还会处理存储过程执行后的输出参数。&lt;/p>
&lt;h2 id="defaultresultsethandler">
 DefaultResultSetHandler
 &lt;a class="anchor" href="#defaultresultsethandler">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>ResultSetHandler&lt;/code> 只有一个实现类 &lt;code>DefaultResultSetHandler&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ResultSetHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">handleResultSets&lt;/span>(Statement stmt) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> Cursor&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">handleCursorResultSets&lt;/span>(Statement stmt) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handleOutputParameters&lt;/span>(CallableStatement cs) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="multiqueries">
 MultiQueries
 &lt;a class="anchor" href="#multiqueries">#&lt;/a>
&lt;/h2>
&lt;h3 id="jdbc">
 JDBC
 &lt;a class="anchor" href="#jdbc">#&lt;/a>
&lt;/h3>
&lt;p>为了同时执行多条查询语句，需要设置 &lt;code>allowMultiQueries=true&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>Connection conn &lt;span style="color:#f92672">=&lt;/span> DriverManager.&lt;span style="color:#a6e22e">getConnection&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;jdbc:mysql://localhost/db?allowMultiQueries=true&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;0987654321&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String sql &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">SELECT * FROM `user`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">SELECT * FROM `blog`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> (Statement stmt &lt;span style="color:#f92672">=&lt;/span> conn.&lt;span style="color:#a6e22e">createStatement&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stmt.&lt;span style="color:#a6e22e">execute&lt;/span>(sql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> cnt &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ResultSet rs &lt;span style="color:#f92672">=&lt;/span> stmt.&lt;span style="color:#a6e22e">getResultSet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (rs &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (stmt.&lt;span style="color:#a6e22e">getMoreResults&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rs &lt;span style="color:#f92672">=&lt;/span> stmt.&lt;span style="color:#a6e22e">getResultSet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(cnt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个查询语句会返回一个 &lt;code>ResultSet&lt;/code>。上边的代码执行后，会返回两个 &lt;code>ResultSet&lt;/code>。因此，&lt;code>cnt&lt;/code> 的结果为 2（一共有两个 &lt;code>SELECT&lt;/code> 查询）。&lt;/p></description></item><item><title>StatementHandler</title><link>https://ileonli.github.io/docs/MyBatis/StatementHandler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/StatementHandler/</guid><description>&lt;h1 id="statementhandler">
 StatementHandler
 &lt;a class="anchor" href="#statementhandler">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>StatementHandler&lt;/code> 接口中的功能很多，例如创建 &lt;code>Statement&lt;/code> 对象，为 SQL 语句绑定实参，执行 select、insert、update、delete 等多种类型的 SQL 语句，批量执行 SQL 语句，将结果集映射成结果对象。&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/MyBatis/StatementHandler.png" alt="" />&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">StatementHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Statement &lt;span style="color:#a6e22e">prepare&lt;/span>(Connection connection, Integer transactionTimeout) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">parameterize&lt;/span>(Statement statement) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">batch&lt;/span>(Statement statement) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(Statement statement) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>(Statement statement, ResultHandler resultHandler) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> Cursor&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">queryCursor&lt;/span>(Statement statement) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BoundSql &lt;span style="color:#a6e22e">getBoundSql&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParameterHandler &lt;span style="color:#a6e22e">getParameterHandler&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>prepare&lt;/code>：从 &lt;code>Connection&lt;/code> 中创建 &lt;code>Statement&lt;/code> 对象。&lt;/li>
&lt;li>&lt;code>parameterize&lt;/code>：绑定 &lt;code>statement&lt;/code> 执行时需要的参数。&lt;/li>
&lt;li>&lt;code>batch&lt;/code>：批量执行 SQL 语句。&lt;/li>
&lt;li>&lt;code>update&lt;/code>：执行 insert、update 和 delete 操作。&lt;/li>
&lt;li>&lt;code>query&lt;/code> 和 &lt;code>queryCursor&lt;/code>：用于执行 select 操作。&lt;/li>
&lt;li>&lt;code>getBoundSql&lt;/code>：获取绑定的 SQL。&lt;/li>
&lt;li>&lt;code>getParameterHandler&lt;/code>：负责处理 SQL 语句中的参数的处理器。&lt;/li>
&lt;/ul>
&lt;h2 id="basestatementhandler">
 BaseStatementHandler
 &lt;a class="anchor" href="#basestatementhandler">#&lt;/a>
&lt;/h2>
&lt;h3 id="prepare">
 prepare
 &lt;a class="anchor" href="#prepare">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>BaseStatementHandler&lt;/code> 中设计了模板方法 &lt;code>prepare&lt;/code>，通过该方法可以获取 &lt;code>Statement&lt;/code> 对象。&lt;/p></description></item><item><title>Executor</title><link>https://ileonli.github.io/docs/MyBatis/Executor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/Executor/</guid><description>&lt;h1 id="executor">
 Executor
 &lt;a class="anchor" href="#executor">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>SqlSession&lt;/code> 中的具体操作都会通过 &lt;code>Executor&lt;/code> 接口进行实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DefaultSqlSession&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> SqlSession {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Executor executor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
 &lt;img src="https://ileonli.github.io/img/MyBatis/Executor.png" alt="" />&lt;/p>
&lt;h2 id="executortype">
 ExecutorType
 &lt;a class="anchor" href="#executortype">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>Executor&lt;/code> 一共有三种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SIMPLE&lt;/code>：&lt;/li>
&lt;li>&lt;code>REUSE&lt;/code>：&lt;/li>
&lt;li>&lt;code>BATCH&lt;/code>：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> ExecutorType {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SIMPLE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> REUSE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BATCH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="baseexecutor">
 BaseExecutor
 &lt;a class="anchor" href="#baseexecutor">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>BaseExecutor&lt;/code> 是继承自 &lt;code>Executor&lt;/code> 接口的抽象类。该类实现了 &lt;code>Executor&lt;/code> 中的大部分方法。&lt;/p>
&lt;p>该类使用了模板方法模式，继承 &lt;code>BaseExecutor&lt;/code> 的子类只需要实现下边的四个基本方法即可完成数据库的相关操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BaseExecutor&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Executor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">doUpdate&lt;/span>(MappedStatement ms, Object parameter) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>BatchResult&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doFlushStatements&lt;/span>(&lt;span style="color:#66d9ef">boolean&lt;/span> isRollback) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doQuery&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ResultHandler resultHandler, BoundSql boundSql) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> Cursor&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doQueryCursor&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BoundSql boundSql) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="simpleexecutor">
 SimpleExecutor
 &lt;a class="anchor" href="#simpleexecutor">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">doUpdate&lt;/span>(MappedStatement ms, Object parameter) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Statement stmt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration configuration &lt;span style="color:#f92672">=&lt;/span> ms.&lt;span style="color:#a6e22e">getConfiguration&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StatementHandler handler &lt;span style="color:#f92672">=&lt;/span> configuration.&lt;span style="color:#a6e22e">newStatementHandler&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>, ms, parameter, RowBounds.&lt;span style="color:#a6e22e">DEFAULT&lt;/span>, &lt;span style="color:#66d9ef">null&lt;/span>, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stmt &lt;span style="color:#f92672">=&lt;/span> prepareStatement(handler, ms.&lt;span style="color:#a6e22e">getStatementLog&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handler.&lt;span style="color:#a6e22e">update&lt;/span>(stmt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> closeStatement(stmt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doQuery&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BoundSql boundSql) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Statement stmt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration configuration &lt;span style="color:#f92672">=&lt;/span> ms.&lt;span style="color:#a6e22e">getConfiguration&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StatementHandler handler &lt;span style="color:#f92672">=&lt;/span> configuration.&lt;span style="color:#a6e22e">newStatementHandler&lt;/span>(wrapper, ms, parameter, rowBounds, resultHandler,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stmt &lt;span style="color:#f92672">=&lt;/span> prepareStatement(handler, ms.&lt;span style="color:#a6e22e">getStatementLog&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handler.&lt;span style="color:#a6e22e">query&lt;/span>(stmt, resultHandler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> closeStatement(stmt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> Cursor&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doQueryCursor&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration configuration &lt;span style="color:#f92672">=&lt;/span> ms.&lt;span style="color:#a6e22e">getConfiguration&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StatementHandler handler &lt;span style="color:#f92672">=&lt;/span> configuration.&lt;span style="color:#a6e22e">newStatementHandler&lt;/span>(wrapper, ms, parameter, rowBounds, &lt;span style="color:#66d9ef">null&lt;/span>, boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Statement stmt &lt;span style="color:#f92672">=&lt;/span> prepareStatement(handler, ms.&lt;span style="color:#a6e22e">getStatementLog&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cursor&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> cursor &lt;span style="color:#f92672">=&lt;/span> handler.&lt;span style="color:#a6e22e">queryCursor&lt;/span>(stmt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stmt.&lt;span style="color:#a6e22e">closeOnCompletion&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> cursor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>BatchResult&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">doFlushStatements&lt;/span>(&lt;span style="color:#66d9ef">boolean&lt;/span> isRollback) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Collections.&lt;span style="color:#a6e22e">emptyList&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Cache</title><link>https://ileonli.github.io/docs/MyBatis/Cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/MyBatis/Cache/</guid><description>&lt;h1 id="一级缓存和二级缓存">
 一级缓存和二级缓存
 &lt;a class="anchor" href="#%e4%b8%80%e7%ba%a7%e7%bc%93%e5%ad%98%e5%92%8c%e4%ba%8c%e7%ba%a7%e7%bc%93%e5%ad%98">#&lt;/a>
&lt;/h1>
&lt;p>MyBatis 提供了二层缓存架构，分别为：&lt;strong>一级缓存&lt;/strong>和&lt;strong>二级缓存&lt;/strong>。&lt;/p>
&lt;h2 id="一级缓存">
 一级缓存
 &lt;a class="anchor" href="#%e4%b8%80%e7%ba%a7%e7%bc%93%e5%ad%98">#&lt;/a>
&lt;/h2>
&lt;p>一级缓存是会话级别的，MyBatis 每创建一个 &lt;code>SqlSession&lt;/code>，就表示开启了一次数据库会话。在一次会话内，可能会在短时间内反复执行完全相同的查询语句。&lt;/p>
&lt;p>&lt;code>Executor&lt;/code> 对象内会建立一个简单的缓存，在执行查询操作时，会先查询一级缓存，如果其中存在完全一样的查询语句，则直接从一级缓存中取出结果。&lt;/p>
&lt;p>一级缓存的生命周期与 &lt;code>SqlSession&lt;/code> 相同，&lt;code>SqlSession&lt;/code> 内部有 &lt;code>Executor&lt;/code> 对象，当调用 &lt;code>SqlSession&lt;/code> 的 &lt;code>close()&lt;/code> 方法时，会调用 &lt;code>Executor&lt;/code> 的 &lt;code>close()&lt;/code> 方法。&lt;/p>
&lt;h3 id="具体流程">
 具体流程
 &lt;a class="anchor" href="#%e5%85%b7%e4%bd%93%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BoundSql boundSql &lt;span style="color:#f92672">=&lt;/span> ms.&lt;span style="color:#a6e22e">getBoundSql&lt;/span>(parameter);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CacheKey key &lt;span style="color:#f92672">=&lt;/span> createCacheKey(ms, parameter, rowBounds, boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@SuppressWarnings&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unchecked&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CacheKey key, BoundSql boundSql) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ErrorContext.&lt;span style="color:#a6e22e">instance&lt;/span>().&lt;span style="color:#a6e22e">resource&lt;/span>(ms.&lt;span style="color:#a6e22e">getResource&lt;/span>()).&lt;span style="color:#a6e22e">activity&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;executing a query&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">object&lt;/span>(ms.&lt;span style="color:#a6e22e">getId&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (closed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ExecutorException(&lt;span style="color:#e6db74">&amp;#34;Executor was closed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (queryStack &lt;span style="color:#f92672">==&lt;/span> 0 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ms.&lt;span style="color:#a6e22e">isFlushCacheRequired&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clearLocalCache();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queryStack&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list &lt;span style="color:#f92672">=&lt;/span> resultHandler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> (List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>) localCache.&lt;span style="color:#a6e22e">getObject&lt;/span>(key) : &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (list &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list &lt;span style="color:#f92672">=&lt;/span> queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queryStack&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (queryStack &lt;span style="color:#f92672">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (DeferredLoad deferredLoad : deferredLoads) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deferredLoad.&lt;span style="color:#a6e22e">load&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// issue #601&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deferredLoads.&lt;span style="color:#a6e22e">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (configuration.&lt;span style="color:#a6e22e">getLocalCacheScope&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> LocalCacheScope.&lt;span style="color:#a6e22e">STATEMENT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// issue #482&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clearLocalCache();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cachekey">
 CacheKey
 &lt;a class="anchor" href="#cachekey">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>CacheKey&lt;/code> 由 &lt;code>MappedStatement&lt;/code> 的 &lt;code>id&lt;/code>、对应的 &lt;code>offset&lt;/code> 和 &lt;code>limit&lt;/code>、SQL 语句（包含 ? 占位符）、用户传入的参数和 &lt;code>Environment&lt;/code> 的 &lt;code>id&lt;/code> 组成。&lt;/p></description></item></channel></rss>