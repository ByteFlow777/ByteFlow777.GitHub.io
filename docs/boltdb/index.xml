<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>boltdb on Leon' Blog</title><link>https://ileonli.github.io/docs/boltdb/</link><description>Recent content in boltdb on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/boltdb/index.xml" rel="self" type="application/rss+xml"/><item><title>boltdb 介绍</title><link>https://ileonli.github.io/docs/boltdb/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/introduction/</guid><description>boltdb 介绍 # https://github.com/boltdb/bolt
boltdb 是一个使用 Go 语言开发的 KV 存储库。该项目的目标是为那些不需要完整数据库服务器（如：Postgres或MySQL）的项目提供一个简单、快速且可靠的数据库。
boltdb 目前已不再维护，CoreOS fork 了该项目，并继续维护 bbolt。
打开数据库 # boltdb 中的顶层对象是 DB。它在磁盘上表示为一个单一文件，并且代表了数据的一个一致性快照。
要打开数据库，只需使用 bolt.Open() 函数：
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/boltdb/bolt&amp;#34; ) func main() { // Open the my.db data file in your current directory. // It will be created if it doesn&amp;#39;t exist. db, err := bolt.Open(&amp;#34;my.db&amp;#34;, 0600, nil) if err != nil { log.Fatal(err) } defer db.Close() ... } 请注意，boltdb 会对数据文件加锁，因此多个进程不能同时打开同一个数据库。尝试打开一个已经被打开的 boltdb 数据库将导致程序挂起，直到其他进程关闭该数据库。为了防止无限期等待，可以为 Open() 函数传递一个超时选项：</description></item><item><title>boltdb node</title><link>https://ileonli.github.io/docs/boltdb/node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/node/</guid><description>分裂 # // spill writes the nodes to dirty pages and splits nodes as it goes. // Returns an error if dirty pages cannot be allocated. func (n *node) spill() error { var tx = n.bucket.tx if n.spilled { return nil } // Spill child nodes first. Child nodes can materialize sibling nodes in // the case of split-merge so we cannot use a range loop. We have to check // the children size on every loop iteration.</description></item><item><title>boltdb 事务</title><link>https://ileonli.github.io/docs/boltdb/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/transaction/</guid><description>boltdb 事务 # boltdb 所有操作（Update 和 View）都会生成一个 Tx，用于记录此次事务的信息。
// txid represents the internal transaction identifier. type txid uint64 // Tx represents a read-only or read/write transaction on the database. // Read-only transactions can be used for retrieving values for keys and creating cursors. // Read/write transactions can create and remove buckets and create and remove keys. // // IMPORTANT: You must commit or rollback transactions when you are done with // them.</description></item><item><title>boltdb 介绍</title><link>https://ileonli.github.io/docs/boltdb/bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/bucket/</guid><description>// bucket represents the on-file representation of a bucket. // This is stored as the &amp;#34;value&amp;#34; of a bucket key. If the bucket is small enough, // then its root page can be stored inline in the &amp;#34;value&amp;#34;, after the bucket // header. In the case of inline buckets, the &amp;#34;root&amp;#34; will be 0. type bucket struct { root pgid // page id of the bucket&amp;#39;s root-level page sequence uint64 // monotonically incrementing, used by NextSequence() } // Bucket represents a collection of key/value pairs inside the database.</description></item><item><title>boltdb 存储</title><link>https://ileonli.github.io/docs/boltdb/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/storage/</guid><description>boltdb 存储 # bolt.Open() # bolt.Open() 是使用数据库的第一个方法，也是最重要的方法之一。该代码的作用是初始化一个 DB 对象。
参数设置 # 首先会创建一个 DB 对象，opened 用于指示数据库是否已成功打开。。
var db = &amp;amp;DB{opened: true} 对参数进行一些初始化设置。
// Set default options if no options are provided. if options == nil { options = DefaultOptions } db.NoGrowSync = options.NoGrowSync db.MmapFlags = options.MmapFlags // Set default values for later DB operations. db.MaxBatchSize = DefaultMaxBatchSize db.MaxBatchDelay = DefaultMaxBatchDelay db.AllocSize = DefaultAllocSize OpenFile # 使用 os.OpenFile() 方法打开传入的数据库文件路径，不存在则创建。
flag := os.</description></item><item><title>boltdb 页结构</title><link>https://ileonli.github.io/docs/boltdb/page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/boltdb/page/</guid><description>boltdb 页结构 # page # type page struct { id pgid flags uint16 count uint16 overflow uint32 ptr uintptr } id：是页面的标识符，每个页面在数据库文件中都有一个唯一的 ID，用于在数据库中定位和引用该页面。 flags：用来表示页面的类型或其他特性。 count：表示页面中存储的元素数量（通常是键值对的数量或子页面的引用数量）。 overflow：表示页面溢出的数量。如果一个页面装不下所有的数据，它可能会使用多个连续的页面来存储，这些连续的页面被称为溢出页面。 ptr：用于指向页面的数据部分。在内存中指向实际存储键值对或其他数据的区域。这个指针使得可以通过内存地址快速访问页面中的数据。 一个 page 页的结构如下所示：
根据 flags 的设置，ptr 会指向 4 种结构体之一。
const ( branchPageFlag = 0x01 leafPageFlag = 0x02 metaPageFlag = 0x04 freelistPageFlag = 0x10 ) branchPageFlag：ptr 指向 branchPageElement[] 数组。 leafPageFlag：ptr 指向 leafPageElement[] 数组。 metaPageFlag：ptr 指向 meta 结构体。 freelistPageFlag：ptr 指向 freelist 结构体。 branchPageElement # // branchPageElement represents a node on a branch page.</description></item></channel></rss>