<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Leon's Blog</title><link>https://byteflow777.github.io/docs/java/</link><description>Recent content in Java on Leon's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://byteflow777.github.io/docs/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Collections Framework</title><link>https://byteflow777.github.io/docs/java/Java-Collections-Framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://byteflow777.github.io/docs/java/Java-Collections-Framework/</guid><description>Java Collections # Java Collections Framework 包含了众多关键的类，如：List, Set Collection 接口 # java.util.Collection 接口 RandomAccess 接口 # java.util.RandomAccess 用于指示 List 是否支持快速随机查找（fast random access） // java.util.RandomAccess public interface RandomAccess { } 该接口中并无任何方法，仅仅用作标记作用，用于指示实现该接口的 List 是否支持快速查找，所有支持快速随机查找的 List 都应该实现该接口。
// 快速随机查找 for (int i=0, n=list.size(); i &amp;lt; n; i++) list.get(i); // 非快速随机查找，迭代器查找 for (Iterator i=list.iterator(); i.hasNext(); ) i.next(); 可以通过 instanceof 判断 List 是否实现了 RandomAccess 接口。对于支持快速随机查找的 List 可以采取快速遍历，用于提升性能。
Collections#binarySearch 通过判断 List 是否实现了 RandomAccess 接口，采取不同的遍历方式。
// java.</description></item><item><title>Thinking in Java</title><link>https://byteflow777.github.io/docs/java/Thinking-in-Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://byteflow777.github.io/docs/java/Thinking-in-Java/</guid><description>Thinking in Java # Thinking in Java 记录了对于 Java 设计与实现的思考 内部类 # class OuterClass { ... class InnerClass { // 非静态内部类 ... } static class StaticNestedClass { // 静态内部类 ... } } 非静态内部类 # 非静态内部类可以访问外部类的所有属性和方法（包括 private 修饰的）。
静态内部类 # 在类里用 static 修饰的类称为静态内部类，静态内部类仅借用外部类的壳包装自己。
接口默认方法 # Java 8 允许我们在接口中定义默认方法，只需在接口方法前加上 default 并提供方法体即可。
public interface Body { // 刚出生的婴儿只会：吃，睡 void eat(); void sleep(); // 随着婴儿成长，学会了：走，说话 // 为了保持兼容性，采用 default 方法 default void walk() { walk.</description></item></channel></rss>