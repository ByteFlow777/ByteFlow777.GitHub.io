<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pro Git on Leon' Blog</title><link>https://ileonli.github.io/docs/ProGit/</link><description>Recent content in Pro Git on Leon' Blog</description><generator>Hugo</generator><language>en</language><atom:link href="https://ileonli.github.io/docs/ProGit/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 基础</title><link>https://ileonli.github.io/docs/ProGit/Git-%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/ProGit/Git-%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="git-基础">
 Git 基础
 &lt;a class="anchor" href="#git-%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h1>
&lt;h2 id="获取-git-仓库">
 获取 Git 仓库
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96-git-%e4%bb%93%e5%ba%93">#&lt;/a>
&lt;/h2>
&lt;p>有两种取得 Git 项目仓库的方法：&lt;/p>
&lt;ol>
&lt;li>将现有项目或目录下导入所有文件到 Git 中，可以使用 &lt;code>$ git init&lt;/code> 命令。&lt;/li>
&lt;li>从服务器克隆一个现有的 Git 仓库，使用 &lt;code>$ git clone &amp;lt;project url&amp;gt;&lt;/code> 命令。&lt;/li>
&lt;/ol>
&lt;h2 id="git-生命周期">
 Git 生命周期
 &lt;a class="anchor" href="#git-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">#&lt;/a>
&lt;/h2>
&lt;p>工作目录下的所有文件都处于两种状态之一：&lt;strong>已跟踪&lt;/strong>和&lt;strong>未跟踪&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>已跟踪&lt;/strong>：是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于&lt;strong>未修改&lt;/strong>、&lt;strong>已修改&lt;/strong>或&lt;strong>已放入暂存区&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>未跟踪&lt;/strong>：工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>编辑已跟踪的文件后（如：修改代码），Git 会将这些修改的文件标记为&lt;strong>已修改文件&lt;/strong>。随后我们会逐步将修改过的文件加入暂存区中，然后提交暂存区中的所有文件。&lt;/p>
&lt;p>如此反复，使用 Git 的生命周期如下图所示：&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/lifecycle.png" alt="" />&lt;/p>
&lt;h3 id="检查当前文件状态">
 检查当前文件状态
 &lt;a class="anchor" href="#%e6%a3%80%e6%9f%a5%e5%bd%93%e5%89%8d%e6%96%87%e4%bb%b6%e7%8a%b6%e6%80%81">#&lt;/a>
&lt;/h3>
&lt;p>如果需要查看文件处于的状态，可以使用 &lt;code>$ git status&lt;/code> 命令。&lt;/p>
&lt;p>当我们对 &lt;code>$ git init&lt;/code> 后的仓库使用此命令，可以看到下边的输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status
On branch main

No commits yet

nothing to commit (create/copy files and use &amp;#34;git add&amp;#34; to track)
&lt;/code>&lt;/pre>&lt;p>我们可以从上边输出中得到以下信息：&lt;/p></description></item><item><title>Git 分支</title><link>https://ileonli.github.io/docs/ProGit/Git-%E5%88%86%E6%94%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/docs/ProGit/Git-%E5%88%86%E6%94%AF/</guid><description>&lt;h1 id="git-分支">
 Git 分支
 &lt;a class="anchor" href="#git-%e5%88%86%e6%94%af">#&lt;/a>
&lt;/h1>
&lt;h2 id="分支创建">
 分支创建
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af%e5%88%9b%e5%bb%ba">#&lt;/a>
&lt;/h2>
&lt;p>使用 &lt;code>$ git branch&lt;/code> 命令后，会在当前所在的提交对象上创建一个指针。此操作并不会直接切换到新创建的分支上。&lt;/p>
&lt;p>那么，Git 又是怎么知道当前在哪一个分支上呢？有一个名为 &lt;code>HEAD&lt;/code> 的特殊指针，指向当前分支。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git branch testing
&lt;/code>&lt;/pre>&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/two-branches.png" alt="" />&lt;/p>
&lt;h2 id="分支切换">
 分支切换
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af%e5%88%87%e6%8d%a2">#&lt;/a>
&lt;/h2>
&lt;p>要切换到一个已存在的分支，需要使用 &lt;code>$ git switch&lt;/code> 命令。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git switch testing
&lt;/code>&lt;/pre>&lt;p>这样 &lt;code>HEAD&lt;/code> 就指向 testing 分支了。&lt;/p>
&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/head-to-testing.png" alt="" />&lt;/p>
&lt;h2 id="分支合并">
 分支合并
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af%e5%90%88%e5%b9%b6">#&lt;/a>
&lt;/h2>
&lt;h3 id="testing-分支提交">
 testing 分支提交
 &lt;a class="anchor" href="#testing-%e5%88%86%e6%94%af%e6%8f%90%e4%ba%a4">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ touch 1.txt
$ git commit -a -m &amp;#39;add: 1.txt&amp;#39;
&lt;/code>&lt;/pre>&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/advance-testing.png" alt="" />&lt;/p>
&lt;h3 id="master-分支提交">
 master 分支提交
 &lt;a class="anchor" href="#master-%e5%88%86%e6%94%af%e6%8f%90%e4%ba%a4">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ git switch master
&lt;/code>&lt;/pre>&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/checkout-master.png" alt="" />&lt;/p>
&lt;pre tabindex="0">&lt;code>$ touch 2.txt
$ git commit -a -m &amp;#39;add: 2.txt&amp;#39;
&lt;/code>&lt;/pre>&lt;p>
 &lt;img src="https://ileonli.github.io/img/ProGit/advance-master.png" alt="" />&lt;/p></description></item></channel></rss>