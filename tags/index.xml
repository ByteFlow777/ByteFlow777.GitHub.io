<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on Leon Li</title><link>https://netholes.github.io/tags/</link><description>Recent content in Tags on Leon Li</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://netholes.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>tmux 快速简单的实践指南【翻译】</title><link>https://netholes.github.io/posts/tmux/a-quick-and-easy-guide-to-tmux/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://netholes.github.io/posts/tmux/a-quick-and-easy-guide-to-tmux/</guid><description>&lt;blockquote>
&lt;p>原文地址：https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/&lt;/p>
&lt;/blockquote>
&lt;p>我喜欢使用命令行进行工作。我认为对于软件开发人员来说，没有比终端更高效、更通用的工具了。当你使用终端时，通常感觉是自由的（free），为什么不喜欢呢？&lt;/p>
&lt;p>过去的这些年里，我一直在尝试精简和自定义我的命令行，使其变得更易于使用、更有趣或仅仅看起来不错。tmux 是让我日常使用命令行时，有良好体验的最重要工具之一。&lt;/p>
&lt;p>&lt;img src="https://netholes.github.io/img/tmux/tmux-1.png" alt="">&lt;/p>
&lt;p>这张截图展示的东西简直是自面包切片以来最好的事情（译者注：&lt;a href="https://www.plansponsor.com/tuesday-trivia-origin-phrase-best-thing-since-sliced-bread/">面包切片&lt;/a>表示对某事或物的赞许）。这就是被叫做终端复用器（terminal multiplexer）的 &lt;a href="https://github.com/tmux/tmux/wiki">tmux&lt;/a>。简单来说，tmux 就是终端中的窗口管理器（脚注 1），该管理器允许你在一个终端窗口中创建多个窗口（windows）和面板（panes）。&lt;/p>
&lt;p>这篇文章将告诉你一些关于 tmux 的介绍和它的潜力，随后是大约 10 分钟的手把手教程，用于设置和了解 tmux。如果你有 10 分钟的空闲时间，并想与你的“书呆子”朋友们赚取街头信誉（译者注：使用 tmux 可以用于&lt;del>装逼&lt;/del>）&lt;/p>
&lt;h2 id="关于-tmux">关于 tmux&lt;/h2>
&lt;p>tmux 的作者将其描述为终端复用器，在这个华丽的词语下隐藏着一个简单的概念：在一个终端中你可以打开多个窗口和分屏视图（split-views），分屏视图在 tmux 中也被叫做面板（panes）。每个面板都有其独立运行的 shell 实例（bash, zhs, 或其它）。这可以让你在一个终端中运行多个终端命令和应用程序，而不需要打开其它终端。&lt;/p>
&lt;p>更重要的是，tmux 会把所有的窗口和面板都会被保存到一个会话中（session）。你可以在任何时间退出一个会话，这被叫做分离（detaching）。tmux 会使所有的会话一直存活，除非主动结束 tmux 服务，比如：重启电脑（脚注 2）。此功能非常有用，因为在后续的任何时间点，你都可以附加（attaching）到离开的对话中。&lt;/p>
&lt;p>如果你曾经通过 ssh 连接到远程服务器或者树莓派（Raspberry Pi）中，你就会知道保留会话的功能非常有用。当 ssh 连接断开后（lose ssh connection），此 tmux 会话将会被分离，但会话仍会在服务其中运行，包括在会话中运行的进程。要继续此会话，只需再次 ssh 到服务器并附加到正在运行的会话。&lt;/p>
&lt;p>当在远程机器上工作时，tmux 将非常有用。当然，在本地工作时，它也非常有用。不仅仅是窗口管理功能，还以为其会话处理功能。就我个人而言，当我切换上下文时，发现自己会脱离会话。当我想继续运行旧任务时，我仅为我的新任务启动一个新会话，并附加到旧会话。&lt;/p>
&lt;p>你可以看到 tmux 基本上提供了两个基本功能：&lt;/p>
&lt;ol>
&lt;li>终端中的管理窗口&lt;/li>
&lt;li>会话管理&lt;/li>
&lt;/ol>
&lt;p>如果你熟悉 &lt;a href="https://www.gnu.org/software/screen/">GNU Screen&lt;/a>，会发现功能很相似。可以把 tmux 看作是 Screen 的一个更容易使用和更强大的替代品（显然我在这里有些固执己见）。&lt;/p>
&lt;p>概念足够了，让我们开始动手实践！&lt;/p>
&lt;h2 id="入门">入门&lt;/h2>
&lt;p>这个实践指南将帮助你很快上手使用 tmux。它将只涵盖基本的功能，这些功能应该足以让您入门并使用 tmux 提高工作效率。只需打开您的终端并按照说明操作即可。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>幸运的是，在大多数操作系统中安装 tmux 是非常简单的。一个简单的 &lt;code>sudo apt-get install tmux&lt;/code>（Ubuntu, WSL 和其衍生版本） 或 &lt;code>brew install tmux&lt;/code>（Mac） 就可以了。&lt;/p>
&lt;h2 id="创建第一个会话">创建第一个会话&lt;/h2>
&lt;p>对于你的第一个会话，简单的使用 &lt;code>tmux&lt;/code> 命令即可创建新会话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ tmux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将创建一个新的 tmux 会话，会话底部会有一个绿色的状态栏。&lt;/p>
&lt;p>&lt;img src="https://netholes.github.io/img/tmux/tmux-2.png" alt="">&lt;/p>
&lt;p>状态栏是 tmux 非常重要的一部分，除了当前打开的窗口信息（左边），它还展示了一些系统信息，如：日期和时间（右边）。状态栏也可以定制，我看过一些非常漂亮（即将到来的日历事件、电池状态等），但这些是我们后续需要做的。&lt;/p>
&lt;h2 id="分离面板">分离面板&lt;/h2>
&lt;p>我们已经创建了第一个对话，可以了解一下面板的使用感觉。当你创建了一个新对话后，tmux 默认打开包含一个面板的窗口。但我们想要一个漂亮的分屏，让我们把它分开吧！&lt;/p>
&lt;p>在 tmux 中的所有命令都前缀键（prefix key）和命令键（command key）组成（emacs 使用者会比较熟悉）。默认情况，tmux 使用 &lt;code>C-b&lt;/code> 作为前缀键。如果你不习惯，这个符号读起来会很奇怪。在 emacs 中， &lt;code>C-&lt;/code> 符号表示长按 ctrl 键（脚注 3）。因此，&lt;code>C-b&lt;/code> 表示同时按下 ctrl 和 b 键。&lt;/p>
&lt;p>将面板分离为左右面板的快捷键是 &lt;code>C-b %&lt;/code>。此快捷键的意思是：同时按下 ctrl 和 b 键，然后松手，随后按下 % 键。你刚刚使用第一个 tmux 命令把你的面板分离为两个。&lt;/p>
&lt;p>&lt;img src="https://netholes.github.io/img/tmux/tmux-3.png" alt="">&lt;/p>
&lt;p>有左右分割，也有上下分割。要将窗格分割为顶部窗格和底部窗格，请使用 &lt;code>C-b &amp;quot;&lt;/code> 快捷键。&lt;/p>
&lt;h2 id="切换面板">切换面板&lt;/h2>
&lt;p>现在我们被困在新创建的窗口中，但我们很想回到左边面板。十分简单，切换到不同面板可以使用 &lt;code>C-b &amp;lt;方向键&amp;gt;&lt;/code> 快捷键， &lt;code>&amp;lt;方向键&amp;gt;&lt;/code> 表示想要切换到的窗口的方向。在我们的例子中，我们想要切换到左边的面板所以留给我们的是 &lt;code>C-b left&lt;/code>。再重复一遍，以便我们完全理解: 这意味着你按 ctrl 和 b 键（前缀命令），然后按左箭头键以到达左侧的面板。&lt;/p>
&lt;p>现在，你可以继续并进一步拆分每个新面板。你可以自由地尝试，像疯子一样分裂你的窗格来感受它。&lt;/p>
&lt;h2 id="关闭面板">关闭面板&lt;/h2>
&lt;p>关闭窗格就像关闭常规终端会话一样简单。键入 &lt;code>$ exit&lt;/code> 或按 &lt;code>ctrl-d&lt;/code>，它就消失了。&lt;/p>
&lt;h2 id="创建窗口">创建窗口&lt;/h2>
&lt;p>tmux 中的窗口可以被比作创建新的虚拟桌面。如果你曾经使用过一个主要的 Linux 桌面环境（KDE，Gnome）或 Mac，希望你会发现这个比喻很有帮助。&lt;/p>
&lt;p>创建新窗口就像输入 &lt;code>C-b c&lt;/code>（最后一次：就是 ctrl 和 b 一次，然后是 c）一样简单。新的窗口将在 tmux 的状态栏中呈现给你。&lt;/p>
&lt;p>&lt;img src="https://netholes.github.io/img/tmux/tmux-4.png" alt="">&lt;/p>
&lt;p>现在你可以在你的新窗口中随意划分窗格，或者不做。这由你决定。&lt;/p>
&lt;p>要切换到上一个窗口（根据你状态栏中的顺序），使用 &lt;code>C-b p&lt;/code>，要切换到下一个窗口，使用 &lt;code>C-b n&lt;/code>。
如果你已经创建了许多窗口，你会发现直接输入一个窗口的编号（状态栏会告诉你哪个窗口有哪个编号）是很有用的，只要使用 &lt;code>C-b &amp;lt;编号&amp;gt;&lt;/code>，其中 &lt;code>&amp;lt;编号&amp;gt;&lt;/code> 是状态栏中窗口名称前面的数字。&lt;/p>
&lt;h2 id="会话处理">会话处理&lt;/h2>
&lt;p>如果你完成了你的会话，你可以通过简单地退出里面的所有面板来摆脱它，或者你可以将会话保留在后台以便以后再使用。&lt;/p>
&lt;p>可以使用 &lt;code>C-b d&lt;/code> 分离当前对话。你也可以用 &lt;code>C-b D&lt;/code> 来让 tmux 给你选择，选择从哪个会话中分离出来。脱离一个会话将使你在该会话中所做的一切在后台运行。你可以在以后的某个时间点回到这个会话中。&lt;/p>
&lt;p>要重新连接到一个会话并继续你离开的地方，你需要弄清楚你想先连接到哪个会话，通过使用以下方法列出当前正在运行的会话：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tmux ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将给你一个所有正在运行的会话的列表，在我们的例子中，它应该是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">0: 2 windows (created Mon May 8 19:41:37 2023)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要连接到这个会话，你需要再次启动 tmux，但这次要告诉它要连接到哪个会话：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tmux attach -t &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-t 0&lt;/code> 是告诉 tmux 要附加到哪个会话的参数。&lt;code>0&lt;/code> 是你的 &lt;code>tmux ls&lt;/code> 输出的第一部分。&lt;/p>
&lt;p>如果你喜欢给你的会话起一个更有意义的名字（而不是以 0 开头的数字），你可以用以下方式创建你的下一个会话：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tmux new -s database
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将创建一个名称为 &amp;ldquo;database&amp;rdquo; 新的会话。&lt;/p>
&lt;p>你也可以重新命名你现有的会话：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tmux rename-session -t &lt;span class="m">0&lt;/span> database
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下次你附加到该会话时，只需使用 &lt;code>tmux attach -t database&lt;/code> 。如果你同时使用多个会话，这可能是一个很重要的功能。&lt;/p>
&lt;p>就这样了! 恭喜你，你刚刚完成了你的第一个 tmux 会话，并且亲自使用了它的窗口和会话管理功能呢个。tmux 还有更多功能，但你刚刚学到的东西应该是未来开始使用 tmux 的一切。&lt;/p>
&lt;h2 id="为什么使用">为什么使用&lt;/h2>
&lt;p>我经常得到的一个答复是：&amp;ldquo;很好，我明白了。但我为什么要使用 tmux 和它奇怪的组合键，而不是直接使用 iTerm2 呢？&amp;rdquo;&lt;/p>
&lt;p>你是对的，当它只是基本的窗口管理时，Mac 的 &lt;a href="https://iterm2.com/">iTerm&lt;/a> 也支持标签和窗格。对于 Linux 来说，有 &lt;a href="https://gnome-terminator.org/">Terminator&lt;/a>。那么，在这个时代，为什么会有人觉得有必要去学习一些古老的技术呢？&lt;/p>
&lt;p>好吧，很明显，这是一种吹牛的权利。如果这还不能说服你，还有一些实际的理由，我为什么喜欢 tmux 而不是 iTerm 等：&lt;/p>
&lt;ol>
&lt;li>会话处理：脱离和附加到会话有助于我进行上下文切换和远程工作。&lt;/li>
&lt;li>平台独立性： 我可以在我的 Macbook、我的 Linux 笔记本、服务器、Raspberry Pi 上使用 tmux，你说了算。&lt;/li>
&lt;li>可定制：我有很多方法可以定制我的 tmux 环境的外观和行为。而且我可以用一个简单的 dotfile 在不同的平台上进行同步。&lt;/li>
&lt;/ol>
&lt;h2 id="后续">后续&lt;/h2>
&lt;p>如果你好奇地想了解 tmux 还能做什么，这是一件好事。幸运的是，大部分的东西都很容易发现。只要键入 &lt;code>C-b ?&lt;/code> 就可以看到所有可用命令的列表，并开始实验。&lt;/p>
&lt;p>我自己经常使用的一些命令是：&lt;/p>
&lt;ol>
&lt;li>&lt;code>C-b z&lt;/code>：使一个面板变成全屏。再按一次 &lt;code>C-b z&lt;/code>，就可以把它缩回到以前的大小。&lt;/li>
&lt;li>&lt;code>C-b C-&amp;lt;方向键&amp;gt;&lt;/code>:按&amp;lt;箭头键&amp;gt;的方向调整窗格大小（脚注 4）。&lt;/li>
&lt;li>&lt;code>C-b ,&lt;/code>:给当前窗口重命名。&lt;/li>
&lt;/ol>
&lt;p>除此之外，还有很多资源可以帮助你进一步了解 tmux。像我这样的人在博客上写他们的 tmux 经验，并分享他们的发现。你可以在 Github 上的 dotfiles 资源库中找到人们分享他们的 tmux 配置。甚至还有 Brian Hogan 写的一本 &lt;a href="https://pragprog.com/search/?q=tmux">专门介绍 tmux 的书&lt;/a>。&lt;/p>
&lt;p>现在，最好是自己去发现一些东西。实验一下，糊弄一下，也许试着用 tmux 来做你的日常工作。它需要一段时间来适应，当你开始的时候，你可能会觉得很慢。我鼓励你继续使用它。感受一下它的功能，很快你就会发现，你使用终端的工作将是纯粹的快乐和令人耳目一新的快速。&lt;/p>
&lt;p>如果你对定制你的 tmux 体验感兴趣，我建议你阅读我的&lt;a href="https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/">定制 tmux.conf 指南&lt;/a>。&lt;/p>
&lt;h2 id="脚注">脚注&lt;/h2>
&lt;ol>
&lt;li>如果你是 Linux 背景的人，你可能对窗口管理器的概念很熟悉，比如 &lt;a href="http://openbox.org/wiki/Main_Page">Openbox&lt;/a>、或 &lt;a href="https://i3wm.org/">i3&lt;/a> &lt;a href="https://awesomewm.org/apidoc/?redirected_from_wiki=1">awesome&lt;/a>。&lt;/li>
&lt;li>tmux 是基于客户端-服务器架构的。虽然这很少有关系，但对了解东西的工作原理有帮助。tmux 服务器会跟踪所有正在运行的会话。你将只在 tmux 客户端工作，创建新的会话或连接到现有的会话。&lt;/li>
&lt;li>也可以是 &lt;code>M-&lt;/code>，这只对 &lt;code>Meta&lt;/code> 键（即大多数键盘上的 Alt）来说是一样的。&lt;/li>
&lt;li>这是个有趣的问题。你的前缀需要 ctrl，也需要你的命令键。我发现最简单的方法是在前缀键之后只释放 b 键，并在反复敲击方向键时一直按着 ctrl。实验一下，找点感觉。&lt;/li>
&lt;/ol></description></item></channel></rss>