<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Leon Li</title><link>https://byteflow777.github.io/post/</link><description>Recent content in Posts on Leon Li</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 20 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://byteflow777.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>开源项目的第一次 PR</title><link>https://byteflow777.github.io/post/other/first-pr/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://byteflow777.github.io/post/other/first-pr/</guid><description>记录一下第一次给开源项目做贡献的经历，希望日后给开源项目做出更多的贡献。
第一次 PR 也仅仅是把枚举类型（enum type）内的属性设置为 final。
万事开头难，希望在搞清楚项目结构后，贡献一些新特性。
明天也是考研成绩出来的时间，希望能有一个好结果</description></item><item><title>Java SPI 机制</title><link>https://byteflow777.github.io/post/java/spi/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://byteflow777.github.io/post/java/spi/</guid><description>简单使用 为使用 Java 操作数据库，我们需要提供驱动程序。为支持多种数据库（如：MySQL、PostgreSQL、Oracle），提供 DatabaseBaseDriver 接口。
package org.example; public interface DatabaseBaseDriver { void open(); void close(); String getName(); } 通过实现 DatabaseBaseDriver 接口，分别创建了操作 MySQL 和 PostgreSQL 数据库的驱动。
package org.example; public class MysqlDriver implements DatabaseBaseDriver { @Override public void open() { System.out.println(&amp;#34;open MySQL connection&amp;#34;); } @Override public void close() { System.out.println(&amp;#34;close MySQL connection&amp;#34;); } @Override public String getName() { return &amp;#34;mysql&amp;#34;; } } package org.example; public class PostgresqlDriver implements DatabaseBaseDriver { @Override public void open() { System.</description></item><item><title>Java 枚举类型</title><link>https://byteflow777.github.io/post/java/enum/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://byteflow777.github.io/post/java/enum/</guid><description>枚举类型（enum type）是由一组常量组合而成
在引入枚举类型之前，通常用一组 int 常量表示每种类型。
public class Color { private static final int RED = 1; private static final int GREEN = 2; private static final int BLACK = 3; } 用 int 常量表示的方法不具有类型安全性。方法只能接收 int 类型，不同 int 值表示不同的 Color，此时无法严格控制入参，很容易出现类型错误。
public void color(int color) { // do something } Java SE 1.5 版本引用了枚举类型，使用 enum 关键字修饰。在编译期间，编译器会对枚举类型进行修改和扩展。
枚举常量（如：RED）会隐式使用 public static final 修饰（编译器修改），按照 Java 命名规范，所有名称都应该采用大写的形式。
public enum Color { RED, GREEN, BLACK; } 枚举常量可以额外增加属性，只需声明成员属性，并添加具有所有属性的构造器。</description></item></channel></rss>