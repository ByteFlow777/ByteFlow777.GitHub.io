<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Leon Li (imleonli@outlook.com)</title><link>https://ileonli.github.io/posts/</link><description>Recent content in Posts on Leon Li (imleonli@outlook.com)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 19 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ileonli.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 数据库连接 (JDBC)</title><link>https://ileonli.github.io/posts/java/jdbc/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/jdbc/</guid><description>&lt;blockquote>
&lt;p>翻译自：https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h1 id="使用-jdbc-处理-sql-语句">使用 JDBC 处理 SQL 语句&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/processingsqlstatements.html">https://docs.oracle.com/javase/tutorial/jdbc/basics/processingsqlstatements.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>一般来说，使用 JDBC 处理 SQL 语句需要以下步骤：&lt;/p>
&lt;ol>
&lt;li>建立连接。&lt;/li>
&lt;li>创建 &lt;code>Statement&lt;/code> 对象。&lt;/li>
&lt;li>执行查询。&lt;/li>
&lt;li>处理 &lt;code>ResultSet&lt;/code> 对象。&lt;/li>
&lt;li>关闭连接。&lt;/li>
&lt;/ol>
&lt;p>本页面使用 &lt;a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/examples/JDBCTutorial/src/com/oracle/tutorial/jdbc/CoffeesTable.java">CoffeesTable.viewTable&lt;/a> 教程示例中的方法来演示这些步骤。该方法输出 &lt;code>COFFEES&lt;/code> 表的内容。本教程稍后将更详细地讨论此方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">viewTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;select COF_NAME, SUP_ID, PRICE, SALES, TOTAL from COFFEES&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">coffeeName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;COF_NAME&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SUP_ID&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFloat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;PRICE&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SALES&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;TOTAL&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">coffeeName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SQLException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JDBCTutorialUtilities&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printSQLException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="建立连接">建立连接&lt;/h2>
&lt;p>首先，需要要使用的数据源建立连接。数据源可以是 DBMS、传统（legacy）文件系统或其他具有相应 JDBC 驱动程序的数据源。此连接由连接对象表示。&lt;/p>
&lt;h2 id="创建-statement">创建 Statement&lt;/h2>
&lt;p>&lt;code>Statement&lt;/code> 是表示 SQL 语句的接口。执行 &lt;code>Statement&lt;/code> 对象会生成 &lt;code>ResultSet&lt;/code> 对象，这是一个代表数据库结果集的数据表。创建 &lt;code>Statement&lt;/code> 对象需要使用 &lt;code>Connection&lt;/code> 对象。&lt;/p>
&lt;p>例如：&lt;code>CoffeesTable.viewTable&lt;/code> 使用以下代码创建 &lt;code>Statement&lt;/code> 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三种不同的 &lt;code>Statement&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Statement&lt;/code>：用于实现简单的且没有参数的 SQL 语句。&lt;/li>
&lt;li>&lt;code>PreparedStatement&lt;/code>：扩展的 &lt;code>Statement&lt;/code>，预编译 SQL 语句，该 SQL 可能包含输入参数。&lt;/li>
&lt;li>&lt;code>CallableStatement&lt;/code>：扩展的 &lt;code>PreparedStatement&lt;/code>，用于执行可能包含输入和输出参数的存储过程。&lt;/li>
&lt;/ul>
&lt;h2 id="执行查询">执行查询&lt;/h2>
&lt;p>为了执行查询，需要调用 &lt;code>Statement&lt;/code> 方法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>execute&lt;/code>：如果查询返回的第一个对象是一个 &lt;code>ResultSet&lt;/code> 对象，则返回 &lt;code>true&lt;/code>。如果查询可能返回一个或多个 &lt;code>ResultSet&lt;/code> 对象，则使用该方法。通过重复调用 &lt;code>Statement.getResultSet&lt;/code> 来读取查询返回的 &lt;code>ResultSet&lt;/code> 对象。&lt;/li>
&lt;li>&lt;code>executeQuery&lt;/code>：返回一个&lt;code>ResultSet&lt;/code> 对象。&lt;/li>
&lt;li>&lt;code>executeUpdate&lt;/code>：返回一个整数，表示被 SQL 语句影响的行数。如果你使用 &lt;code>INSERT&lt;/code>、&lt;code>DELETE&lt;/code> 或 &lt;code>UPDATE&lt;/code> 等SQL 语句，请使用此方法。&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;code>CoffeesTable.viewTable&lt;/code> 使用以下代码执行 &lt;code>Statement&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="处理-resultset-对象">处理 &lt;code>ResultSet&lt;/code> 对象&lt;/h2>
&lt;p>你可以通过游标（cursor）访问 &lt;code>ResultSet&lt;/code> 对象中的数据。请注意，该游标不是数据库游标。该游标是一个指针，指向 &lt;code>ResultSet&lt;/code> 对象中的一行数据。最初，光标位于第一行之前。你可以调用 &lt;code>ResultSet&lt;/code> 对象中定义的各种方法来移动光标。&lt;/p>
&lt;p>例如，&lt;code>CoffeesTable.viewTable&lt;/code> 重复调用 &lt;code>ResultSet.next&lt;/code> 方法将光标向前移动一行。每次调用&lt;code>next&lt;/code> 时，该方法都会输出光标当前所在行的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">coffeeName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;COF_NAME&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SUP_ID&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFloat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;PRICE&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SALES&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;TOTAL&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">coffeeName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ..
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关闭连接">关闭连接&lt;/h2>
&lt;p>当使用完 &lt;code>Connection&lt;/code>、&lt;code>Statement&lt;/code> 或 &lt;code>ResultSet&lt;/code> 对象后，调用其 &lt;code>close&lt;/code> 方法立即释放正在使用的资源。&lt;/p>
&lt;p>此外，使用 try-with-resources 语句自动关闭 &lt;code>Connection&lt;/code>、&lt;code>Statement&lt;/code> 和 &lt;code>ResultSet&lt;/code> 对象，无论是否抛出 &lt;code>SQLException&lt;/code> 异常（当 JDBC 在与数据源交互期间遇到错误时，它会抛出 &lt;code>SQLException&lt;/code>）。自动资源语句由 try 语句和一个或多个声明的资源组成。例如 &lt;code>CoffeesTable.viewTable&lt;/code> 方法自动关闭其 &lt;code>Statement&lt;/code> 对象，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">viewTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;select COF_NAME, SUP_ID, PRICE, SALES, TOTAL from COFFEES&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">coffeeName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;COF_NAME&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SUP_ID&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFloat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;PRICE&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SALES&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;TOTAL&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">coffeeName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">supplierID&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sales&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SQLException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JDBCTutorialUtilities&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printSQLException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是一个 try-with-resources 语句，它声明了一个资源 &lt;code>stmt&lt;/code>，当 try 块终止时，该资源将自动关闭：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="建立连接-1">建立连接&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html">https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>首先，你需要与你使用的数据源建立连接。数据源可以是 DBMS、传统（legacy）文件系统或具其他具有相应 JDBC 驱动程序的数据源。通常，一个 JDBC 应用使用下面两个类中的一个连接到目标数据源：&lt;/p>
&lt;ul>
&lt;li>&lt;code>DriverManager&lt;/code>：通过这个完全实现的类可将应用程序连接到数据源，数据源由数据库 URL 指定。当此类第一次尝试建立连接时，会自动加载类路径下所有的 JDBC 4.0 驱动。请注意，你的程序必须手动加载 4.0 版本之前的 JDBC 驱动。&lt;/li>
&lt;li>&lt;code>DataSource&lt;/code>：该接口优于 &lt;code>DriverManager&lt;/code>，对于底层数据源的细节对应用透明。设置 &lt;code>DataSource&lt;/code> 对象的属性以使其代表特定的数据源。&lt;/li>
&lt;/ul>
&lt;h2 id="使用-drivermanager-类">使用 DriverManager 类&lt;/h2>
&lt;p>使用 &lt;code>DeriverManager&lt;/code> 类连接到 DBMS 涉及调用 &lt;code>DriverManager.getConnection&lt;/code> 方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">getConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Properties&lt;/span> &lt;span class="n">connectionProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connectionProps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connectionProps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;jdbc:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbms&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;://&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverName&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">portNumber&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connectionProps&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;derby&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;jdbc:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbms&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbName&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;;create=true&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connectionProps&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Connected to database&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DriverManager.getConnection&lt;/code> 方法建立了数据库连接。此方法需要数据库 URL，取决于你的 DBMS。下边是一些数据库 URL 的例子：&lt;/p>
&lt;ol>
&lt;li>MySQL：&lt;code>jdbc:mysql://localhost:3306/&lt;/code>，其中 &lt;code>localhost&lt;/code> 是托管数据库服务器的名称，3306 是端口。&lt;/li>
&lt;li>Java DB：&lt;code>jdbc:derby:testdb;create=true&lt;/code>，其中 &lt;code>testdb&lt;/code> 是要连接的数据库名称，&lt;code>create=true&lt;/code> 指明 DBMS 创建数据库。
&lt;blockquote>
&lt;p>注意：此 URL 可与 Java DB 嵌入式驱动程序建立数据库连接。Java DB 还包括一个网络客户端驱动程序，它使用不同的 URL。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>此方法使用 &lt;code>Properties&lt;/code> 对象指定访问 DBMS 所需的用户名和密码。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>通常，在数据库 URL 中，你还需要指定想要连接的现存数据库名称。例如：&lt;code>jdbc:mysql://localhost:3306/mysql&lt;/code> 展示了连接到数据库名为 &lt;code>mysql&lt;/code> 的 MySQL 数据库 URL。本教程中的示例使用的 URL 未指定特定数据库，因为示例创建了一个新数据库。&lt;/li>
&lt;li>在 JDBC 之前的版本中，为获得连接，你首先需要调用 &lt;code>Class.forName&lt;/code> 方法初始化 JDBC 驱动。此方法需要类型为 &lt;code>java.sql.Driver&lt;/code> 的对象。每个 JDBC 驱动都包含一个或多个实现 &lt;code>java.sql.Driver&lt;/code> 接口的类。Java DB 的驱动是 &lt;code>org.apache.derby.jdbc.EmbeddedDriver&lt;/code> 和 &lt;code>org.apache.derby.jdbc.ClientDriver&lt;/code>。MySQL Connector/J 之一是 &lt;code>com.mysql.cj.jdbc.Driver&lt;/code>。查阅你使用的 DBMS 驱动的文档来获取实现 &lt;code>java.sql.Driver&lt;/code> 接口的类名。在类路径找到的 JDBC 4.0 驱动会被自动加载。（然而，你需要通过 &lt;code>Class.forName&lt;/code> 方法手动加载 JDBC 4.0 之前的所有驱动）。&lt;/li>
&lt;/ul>
&lt;p>此方法返回 &lt;code>Connection&lt;/code> 对象，此对象表示与 DBMS 或指定数据库的连接。通过此对象查询数据库。&lt;/p>
&lt;h2 id="指定数据库连接-url">指定数据库连接 URL&lt;/h2>
&lt;p>数据库连接 URL 是 DBMS JDBC 驱动连接到数据库所使用的字符串。它可以包含一些信息，如搜索数据库的位置、要连接的数据库名称以及配置属性等。数据库连接 URL 的语法由 DBMS 规定。&lt;/p>
&lt;h3 id="java-db-数据库连接-url">Java DB 数据库连接 URL&lt;/h3>
&lt;p>下边是 Java DB 数据库连接 URL 的语法：&lt;/p>
&lt;pre tabindex="0">&lt;code>jdbc:derby:[subsubprotocol:][databaseName][;attribute=value]*
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>subsubprotocol&lt;/code>：指定 Java DB 应在何处搜索数据库，在目录、内存、类路径或者 JAR 文件中。该部分通常被省略。&lt;/li>
&lt;li>&lt;code>databaseName&lt;/code> 是应该连接到的数据库名称。&lt;/li>
&lt;li>&lt;code>attribute=value&lt;/code> 代表是可选的，以分号分割的符号列表。这些属性允许你指导 Java DB 执行各种任务：包括：
&lt;ul>
&lt;li>创建在连接 URL 指定的数据库。&lt;/li>
&lt;li>加密在连接 URL 指定的数据库。&lt;/li>
&lt;li>指定存储日志和追踪信息的目录。&lt;/li>
&lt;li>指定连接到数据库的用户名和密码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="mysql-connectorj-数据库-url">MySQL Connector/J 数据库 URL&lt;/h3>
&lt;p>下边是 MySQL Connector/J 数据库连接 URL 的语法：&lt;/p>
&lt;pre tabindex="0">&lt;code>jdbc:mysql://[host][,failoverhost...]
[:port]/[database]
[?propertyName1][=propertyValue1]
[&amp;amp;propertyName2][=propertyValue2]...
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>host:port&lt;/code>：是数据库所在计算机的主机名和端口号。如果未指定，默认的 &lt;code>host&lt;/code> 和 &lt;code>port&lt;/code> 分别是 127.0.0.1 和 3306。&lt;/li>
&lt;li>&lt;code>database&lt;/code>：是数据库连接的名称。如果未指定，建立连接时不使用任何数据库。&lt;/li>
&lt;li>&lt;code>failover&lt;/code>：是备用数据库的名称（MySQL Connector/J 支持故障转移）。&lt;/li>
&lt;li>&lt;code>propertyName=propertyValue&lt;/code>：是可选的，使用 &amp;amp; 分割的属性列表。这些属性允许你指导 MySQL Connector/J 执行各种任务。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="使用-datasource-对象连接">使用 &lt;code>DataSource&lt;/code> 对象连接&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/sqldatasources.html">https://docs.oracle.com/javase/tutorial/jdbc/basics/sqldatasources.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>本节将介绍 &lt;code>DataSource&lt;/code> 对象，该对象是获取数据源连接的首选方式。除了稍后将介绍的其他优点外，数据源对象还可以提供连接池和分布式事务。这一功能对于企业数据库计算至关重要。特别是，它是企业 JavaBeans（EJB）技术不可或缺的一部分。&lt;/p>
&lt;p>本节将向你展示如何使用 &lt;code>DataSource&lt;/code> 接口获取连接，以及如何使用分布式事务和连接池。这两项操作对 JDBC 应用程序的代码改动都很小。&lt;/p>
&lt;p>系统管理员通常使用工具（如 Apache Tomcat 或 Oracle WebLogic Server）来部署实现这些操作的类，部署这些类所需的工作因所部署的 &lt;code>DataSource&lt;/code> 对象的类型而异。因此，本节的大部分内容将用于展示系统管理员如何设置环境，以便程序员可以使用 &lt;code>DataSource&lt;/code> 对象获取连接。&lt;/p>
&lt;h2 id="使用-datasource-对象获得连接">使用 &lt;code>DataSource&lt;/code> 对象获得连接&lt;/h2>
&lt;p>在建立连接章节中，你学习了如何使用 &lt;code>DriverManager&lt;/code> 类获取连接。本节将向你展示如何使用&lt;code>DataSource&lt;/code> 对象获取与数据源的连接，这也是首选方法。&lt;/p>
&lt;p>实现 &lt;code>DataSource&lt;/code> 的类实例化的对象代表特定的 DBMS 或其他数据源（如文件）。数据源对象代表特定的 DBMS 或其他数据源（如文件）。如果一家公司使用多个数据源，它将为每个数据源部署一个单独的 &lt;code>DataSource&lt;/code> 对象。数据源接口由驱动程序供应商实现。它可以通过三种不同的方式实现：&lt;/p>
&lt;ul>
&lt;li>基本的 &lt;code>DataSource&lt;/code> 实现会生成标准 &lt;code>Connection&lt;/code> 对象，这些对象不会被池化，也不会在分布式事务中使用。&lt;/li>
&lt;li>支持连接池的 &lt;code>DataSource&lt;/code> 实现会生成参与连接池的 &lt;code>Connection&lt;/code> 对象，即可以循环使用的连接。&lt;/li>
&lt;li>支持分布式事务的 &lt;code>DataSource&lt;/code> 实现生成的 &lt;code>Connection&lt;/code> 对象可用于分布式事务，即访问两个或多个 DBMS 服务器的事务。&lt;/li>
&lt;/ul>
&lt;p>JDBC 驱动程序应至少包含一个基本的数据源实现。例如：Java DB 的 JDBC 驱动程序包含 &lt;code>org.apache.derby.jdbc.ClientDataSource&lt;/code> 实现，MySQL 则包含 &lt;code>com.mysql.jdbc.jdbc2.optional.MysqlDataSource&lt;/code>。如果客户端在 Java 8 compact profile 2 上运行，则 Java DB 的JDBC 驱动程序为 &lt;code>org.apache.derby.jdbc.BasicClientDataSource40&lt;/code>。本教程的示例需要compact profile 3 或更高版本。&lt;/p>
&lt;p>支持分布式事务的 &lt;code>DataSource&lt;/code> 类通常也实现了对连接池的支持。例如：EJB 供应商提供的 &lt;code>DataSource&lt;/code> 类也同时支持连接池和分布式事务。&lt;/p>
&lt;p>假设前面例子中生意兴隆的 Coffee Break 连锁店的店主决定通过在互联网上销售咖啡来进一步扩张。由于预计会有大量在线业务，店主肯定需要连接池。打开和关闭连接需要大量的开销，而且店主预计这个在线订购系统将需要大量的查询和更新。有了连接池，连接池就可以反复使用，避免了每次访问数据库都要创建新连接的开销。此外，所有者现在还有第二个数据库管理系统，其中包含最近收购的咖啡烘焙公司的数据。这意味着所有者希望能够编写同时使用旧 DBMS 服务器和新 DBMS 服务器的分布式事务。&lt;/p>
&lt;p>连锁店老板重新配置了计算机系统，以便为新的、更大的客户群提供服务。店主购买了最新的 JDBC 驱动程序和与之配合使用的 EJB 应用程序服务器，以便能够使用分布式事务并提高连接池带来的性能。许多 JDBC 驱动程序都与最近购买的 EJB 服务器兼容。所有者现在有一个三层架构，中间层是新的 EJB 应用程序服务器和 JDBC 驱动程序，第三层是两个 DBMS 服务器。发出请求的客户端计算机是第一层。&lt;/p>
&lt;h2 id="部署基本-datasource-对象">部署基本 &lt;code>DataSource&lt;/code> 对象&lt;/h2>
&lt;p>系统管理员需要部署 &lt;code>DataSource&lt;/code> 对象，以便 Coffee Break 的编程团队可以开始使用它们。部署数据源对象包括三项任务：&lt;/p>
&lt;ol>
&lt;li>创建 &lt;code>DataSource&lt;/code> 类的实例。&lt;/li>
&lt;li>设置属性。&lt;/li>
&lt;li>通过使用 Java 命名和目录接口（JNDI）API 的命名服务进行注册。&lt;/li>
&lt;/ol>
&lt;p>首先，考虑最基本的情况，即使用 &lt;code>DataSource&lt;/code> 接口的基本实现，也就是不支持连接池或分布式事务的实现。在这种情况下，只需部署一个 &lt;code>DataSource&lt;/code> 对象。&lt;code>DataSource&lt;/code> 的基本实现与 &lt;code>DriverManager&lt;/code> 类产生的连接类型相同。&lt;/p>
&lt;h3 id="创建-datasource-类的实例并设置属性">创建 &lt;code>DataSource&lt;/code> 类的实例并设置属性&lt;/h3>
&lt;p>假设一家公司只需要 &lt;code>DataSource&lt;/code> 的基本实现，并从 JDBC 供应商 DB Access, Inc. 该驱动程序包含实现 &lt;code>DataSource&lt;/code> 接口的 &lt;code>com.dbaccess.BasicDataSource&lt;/code> 类。下面的代码节选创建了一个 &lt;code>BasicDataSource&lt;/code> 类的实例并设置了其属性。部署 &lt;code>BasicDataSource&lt;/code> 实例后，程序员可以调用 &lt;code>DataSource.getConnection&lt;/code> 方法获取与公司数据库 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 的连接。首先，系统管理员使用默认构造函数创建 &lt;code>BasicDataSource&lt;/code> 对象 &lt;code>ds&lt;/code>。然后，系统管理员设置三个属性。请注意，以下代码通常由部署工具执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BasicDataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BasicDataSource&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;grinder&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDatabaseName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;CUSTOMER_ACCOUNTS&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Customer accounts database for billing&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>变量 &lt;code>ds&lt;/code> 代表服务器上安装的数据库 &lt;code>CUSTOMER_ACCOUNTS&lt;/code>。任何由 &lt;code>BasicDataSource&lt;/code> 对象 &lt;code>ds&lt;/code> 生成的连接都将是指向数据库 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 的连接。&lt;/p>
&lt;h3 id="使用-jndi-api-在命名服务中注册数据源对象">使用 JNDI API 在命名服务中注册数据源对象&lt;/h3>
&lt;p>属性设置完成后，系统管理员就可以用 JNDI（Java 命名和目录接口）命名服务注册 &lt;code>BasicDataSource&lt;/code> 对象。所使用的特定命名服务通常由系统属性决定，在此不做显示。以下为注册 &lt;code>BasicDataSource&lt;/code> 对象，并将其与逻辑名称 &lt;code>jdbc/billingDB&lt;/code> 绑定的部分代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/billingDB&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码使用 JNDI API。第一行创建一个 &lt;code>InitialContext&lt;/code> 对象，作为名称的起点，类似于文件系统中的根目录。第二行将 &lt;code>BasicDataSource&lt;/code> 对象 ds 与逻辑名称 &lt;code>jdbc/billingDB&lt;/code> 关联或绑定。在接下来的代码节选中，你将给命名服务提供这个逻辑名称，然后它将返回 &lt;code>BasicDataSource&lt;/code> 对象。逻辑名称可以是任何字符串。在本例中，公司决定使用 &lt;code>billingDB&lt;/code> 作为 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 数据库的逻辑名称。&lt;/p>
&lt;p>在上例中，JDBC 是初始上下文下的子上下文，就像根目录下的目录是子目录一样。&lt;code>jdbc/billingDB&lt;/code> 这个名称就像一个路径名，路径中的最后一项类似于文件名。在本例中，&lt;code>billingDB&lt;/code> 是赋予 &lt;code>BasicDataSource&lt;/code> 对象 &lt;code>ds&lt;/code> 的逻辑名称。子上下文 JDBC 是为绑定到数据源对象的逻辑名称保留的，因此 JDBC 将始终是数据源逻辑名称的第一部分。&lt;/p>
&lt;h3 id="使用部署后的-datasource-对象">使用部署后的 &lt;code>DataSource&lt;/code> 对象&lt;/h3>
&lt;p>系统管理员部署基本数据源实现后，程序员就可以使用它了。这意味着程序员可以给出绑定到 &lt;code>DataSource&lt;/code> 类实例的逻辑数据源名称，而 JNDI 命名服务将返回该 &lt;code>DataSource&lt;/code> 类的实例。然后就可以在该 &lt;code>DataSource&lt;/code> 对象上调用 &lt;code>getConnection&lt;/code> 方法，以获得与其所代表的数据源的连接。例如，程序员可以编写以下两行代码来获取一个数据源对象，该对象将产生与数据库 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 的连接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">DataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/billingDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一行代码获取初始上下文，作为检索数据源对象的起点。如果向方法查找提供逻辑名称 &lt;code>jdbc/billingDB&lt;/code>，该方法将返回系统管理员在部署时绑定到 &lt;code>jdbc/billingDB&lt;/code> 的 &lt;code>DataSource&lt;/code> 对象。由于方法查找的返回值是 Java 对象，我们必须将其转换为更具体的 &lt;code>DataSource&lt;/code> 类型，然后再将其赋值给变量 &lt;code>ds&lt;/code>。&lt;/p>
&lt;p>变量 &lt;code>ds&lt;/code> 是实现了 &lt;code>DataSource&lt;/code> 接口的 &lt;code>com.dbaccess.BasicDataSource&lt;/code> 类的实例。调用方法 &lt;code>ds.getConnection&lt;/code> 将生成一个连接到 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 数据库的连接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;fernanda&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;brewed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>getConnection&lt;/code> 方法只需要用户名和密码，因为变量 &lt;code>ds&lt;/code> 的属性中包含了与 &lt;code>CUSTOMER_ACCOUNTS&lt;/code> 数据库建立连接所需的其他信息，如数据库名称和位置。&lt;/p>
&lt;h3 id="datasource-对象的优势">&lt;code>DataSource&lt;/code> 对象的优势&lt;/h3>
&lt;p>由于 &lt;code>DataSource&lt;/code> 对象的属性，它比 &lt;code>DriverManager&lt;/code> 类更适合用于获取连接。程序员不必再在应用程序中硬性编码驱动程序名称或 JDBC URL，从而使应用程序更具可移植性。此外，数据源属性也使代码维护变得更加简单。如果有更改，系统管理员可以更新数据源属性，而不必担心更改与数据源建立连接的每个应用程序。例如，如果数据源被转移到不同的服务器上，系统管理员只需将 serverName 属性设置为新的服务器名称即可。&lt;/p>
&lt;p>除了可移植性和易于维护外，使用 &lt;code>DataSource&lt;/code> 对象获取连接还具有其他优势。当 &lt;code>DataSource&lt;/code> 接口与 &lt;code>ConnectionPoolDataSource&lt;/code> 实现配合使用时，该 &lt;code>DataSource&lt;/code> 类实例产生的所有连接都将自动成为池连接。同样，当 &lt;code>DataSource&lt;/code> 类的实现与 &lt;code>XADataSource&lt;/code> 类协同工作时，它产生的所有连接将自动成为可在分布式事务中使用的连接。下一节将介绍如何部署这些类型的数据源实现。&lt;/p>
&lt;h2 id="部署其它-datasource-实现">部署其它 &lt;code>DataSource&lt;/code> 实现&lt;/h2>
&lt;p>系统管理员或其他相关人员可以部署 &lt;code>DataSource&lt;/code> 对象，使其产生的连接是池连接。为此，首先部署 &lt;code>ConnectionPoolDataSource&lt;/code> 对象，然后部署一个为与之配合工作而实现的 &lt;code>DataSource&lt;/code> 对象。设置 &lt;code>ConnectionPoolDataSource&lt;/code> 对象的属性，使其代表将产生连接的数据源。&lt;code>ConnectionPoolDataSource&lt;/code> 对象向 JNDI 命名服务注册后，数据源对象就会被部署。一般来说，数据源对象只需设置两个属性：&lt;code>description&lt;/code> 和 &lt;code>dataSourceName&lt;/code>。给 &lt;code>dataSourceName&lt;/code> 属性的值是标识先前部署的 &lt;code>ConnectionPoolDataSource&lt;/code> 对象的逻辑名称，该对象包含建立连接所需的属性。&lt;/p>
&lt;p>部署了 &lt;code>ConnectionPoolDataSource&lt;/code> 和 &lt;code>DataSource&lt;/code> 对象后，就可以在 &lt;code>DataSource&lt;/code> 对象上调用 &lt;code>DataSource.getConnection&lt;/code> 方法，获取池连接。该连接将指向 &lt;code>ConnectionPoolDataSource&lt;/code> 对象属性中指定的数据源。&lt;/p>
&lt;p>下面的示例描述了 Coffee Break 的系统管理员如何部署为提供池连接而实施的 &lt;code>DataSource&lt;/code> 对象。系统管理员通常会使用部署工具，因此本节显示的代码片段就是部署工具要执行的代码。&lt;/p>
&lt;p>为了获得更好的性能，Coffee Break 公司从 DB Access 公司购买了一个 JDBC 驱动程序，其中包括实现 &lt;code>ConnectionPoolDataSource&lt;/code> 接口的 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 类。系统管理员创建该类的实例，设置其属性，并将其注册到 JNDI 命名服务。Coffee Break 从其 EJB 服务器供应商 Application Logic 公司购买了数据源类 &lt;code>com.applogic.PooledDataSource&lt;/code>。&lt;code>com.applogic.PooledDataSource&lt;/code> 类通过使用 &lt;code>ConnectionPoolDataSource&lt;/code> 类 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 提供的支持实现连接池。&lt;/p>
&lt;p>必须首先部署 &lt;code>ConnectionPoolDataSource&lt;/code> 对象。以下代码创建了 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 的实例并设置了其属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ConnectionPoolDS&lt;/span> &lt;span class="n">cpds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ConnectionPoolDS&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;creamer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDatabaseName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;COFFEEBREAK&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPortNumber&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">9040&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Connection pooling for &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;COFFEEBREAK DBMS&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署 &lt;code>ConnectionPoolDataSource&lt;/code> 对象后，系统管理员将部署 &lt;code>DataSource&lt;/code> 对象。以下代码将 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 对象 &lt;code>cpds&lt;/code> 注册到 JNDI 命名服务。请注意，与 &lt;code>cpds&lt;/code> 变量关联的逻辑名称已将子上下文池添加到子上下文 JDBC 下，这类似于在分级文件系统中将子目录添加到另一个子目录。&lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 类实例的逻辑名称总是以 &lt;code>jdbc/pool&lt;/code> 开头。Oracle 建议将所有 &lt;code>ConnectionPoolDataSource&lt;/code> 对象放在子上下文 &lt;code>jdbc/pool&lt;/code> 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/pool/fastCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cpds&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，部署 &lt;code>DataSource&lt;/code> 类，该类用于与 &lt;code>cpds&lt;/code> 变量和 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 类的其他实例交互。以下代码创建了该类的一个实例并设置了其属性。请注意 &lt;code>com.applogic.PooledDataSource&lt;/code> 实例只设置了两个属性。设置 &lt;code>description&lt;/code> 属性是因为它总是必需的。另一个被设置的属性 &lt;code>dataSourceName&lt;/code> 给出了 &lt;code>cpds&lt;/code> 的逻辑 JNDI 名称，它是 &lt;code>com.dbaccess.ConnectionPoolDS&lt;/code> 类的一个实例。换句话说，&lt;code>cpds&lt;/code> 代表 &lt;code>ConnectionPoolDataSource&lt;/code> 对象，并为 &lt;code>DataSource&lt;/code> 对象实现连接池。&lt;/p>
&lt;p>部署工具可能会执行以下代码，创建 &lt;code>PooledDataSource&lt;/code> 对象、设置其属性并将其绑定到逻辑名称 &lt;code>jdbc/fastCoffeeDB&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applogic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">PooledDataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applogic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">PooledDataSource&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;produces pooled connections to COFFEEBREAK&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDataSourceName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/pool/fastCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/fastCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，会部署一个 &lt;code>DataSource&lt;/code> 对象，应用程序可从该数据源对象中获得与数据库 COFFEEBREAK 的池连接。&lt;/p>
&lt;h2 id="获取并使用池化连接">获取并使用池化连接&lt;/h2>
&lt;p>连接池是数据库连接对象的缓存。这些对象表示应用程序可以用来连接到数据库的物理连接。在运行时，应用程序从池中获取连接。如果池中包含可以满足请求的连接，则将连接返回给应用程序。如果未找到连接，则会创建一个新连接并将其返回给应用程序。应用程序使用该连接对数据库执行一些工作，然后将对象返回到池中。然后该连接可用于下一个连接请求。&lt;/p>
&lt;p>连接池促进了连接对象的重用，减少了连接对象的创建次数。连接池显著提高了数据库密集型应用程序的性能，因为创建连接对象在时间和资源方面都非常昂贵。&lt;/p>
&lt;p>现在已经部署了这些 &lt;code>DataSource&lt;/code> 和 &lt;code>ConnectionPoolDataSource&lt;/code> 对象，程序员可以使用 &lt;code>DataSource&lt;/code> 对象来获取池连接。获取池化连接的代码与获取非池化连接的代码类似，如以下两行所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/fastCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>变量 &lt;code>ds&lt;/code> 表示一个 &lt;code>DataSource&lt;/code> 对象，该对象可以生成到数据库 &lt;code>COFFEEBREAK&lt;/code> 的池连接。你只需检索一次该数据源对象，因为你可以使用它来生成所需的任意多个池连接。对 &lt;code>ds&lt;/code> 变量调用 &lt;code>getConnection&lt;/code> 方法会自动生成池连接，因为 &lt;code>ds&lt;/code> 变量表示的 &lt;code>DataSource&lt;/code> 对象已配置为生成池连接。&lt;/p>
&lt;p>连接池通常对程序员来说是透明的。使用池连接时，只需要做两件事：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>DataSource&lt;/code> 对象而不是 &lt;code>DriverManager&lt;/code> 类获取连接。在以下代码行中，&lt;code>ds&lt;/code> 是一个已实现和部署的 &lt;code>DataSource&lt;/code> 对象，以便使用此对象创建池连接，用户名和密码是表示有权访问数据库的用户凭据的变量:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>使用 &lt;code>finally&lt;/code> 语句关闭池化连接。下边的 &lt;code>finally&lt;/code> 块适合使用池连接的代码的 &lt;code>try/catch&lt;/code> 块之后：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... code to use the pooled
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// connection con
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... code to handle exceptions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">con&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>否则，使用连接池的应用程序与使用常规连接的应用程序相同。当使用连接池时，应用程序程序员可能会注意到的唯一另一件事是性能更好。&lt;/p>
&lt;p>以下示例代码获取一个 &lt;code>DataSource&lt;/code> 对象，该对象生成与数据库 &lt;code>COFFEEBREAK&lt;/code> 的连接，并使用它来更新表 &lt;code>COFFEES&lt;/code> 中的价格：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ejb.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.naming.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ConnectionPoolingBean&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">SessionBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejbCreate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">CreateException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/fastCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">updatePrice&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">cofName&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PreparedStatement&lt;/span> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAutoCommit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepareStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;UPDATE COFFEES &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;SET PRICE = ? &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;WHERE COF_NAME = ?&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFloat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cofName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeUpdate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commit&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">con&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此代码示例中的连接参与连接池，因为以下情况成立：&lt;/p>
&lt;ol>
&lt;li>已部署实现 &lt;code>ConnectionPoolDataSource&lt;/code> 的类的实例。&lt;/li>
&lt;li>已部署实现 &lt;code>DataSource&lt;/code> 的类的实例，并且为其 &lt;code>dataSourceName&lt;/code> 属性设置的值是绑定到先前部署的 &lt;code>ConnectionPoolDataSource&lt;/code> 对象的逻辑名称。&lt;/li>
&lt;/ol>
&lt;p>请注意，虽然此代码与你之前见过的代码非常相似，但它在以下方面有所不同：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>除了 &lt;code>java.sql&lt;/code> 之外，它还导入 &lt;code>javax.sql&lt;/code>、&lt;code>javax.ejb&lt;/code> 和 &lt;code>javax.naming&lt;/code> 包。
&lt;code>DataSource&lt;/code> 和 &lt;code>ConnectionPoolDataSource&lt;/code> 接口位于 &lt;code>javax.sql&lt;/code> 包中，JNDI 构造函数 &lt;code>InitialContext&lt;/code> 和方法 &lt;code>Context.lookup&lt;/code> 是 &lt;code>javax.naming&lt;/code> 包的一部分。此特定示例代码采用 EJB 组件的形式，该组件使用 &lt;code>javax.ejb&lt;/code> 包中的 API。此示例的目的是展示你使用池连接的方式与使用非池连接的方式相同，因此你不必担心理解 EJB API。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>DataSource&lt;/code> 对象来获取连接，而不是使用 &lt;code>DriverManager&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>finally&lt;/code> 块来确保连接已关闭。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>获取和使用池连接与获取和使用常规连接类似。当充当系统管理员的某人正确部署了 &lt;code>ConnectionPoolDataSource&lt;/code> 对象和 &lt;code>DataSource&lt;/code> 对象时，应用程序将使用该 &lt;code>DataSource&lt;/code> 对象来获取池连接。但是，应用程序应该使用 &lt;code>finally&lt;/code> 块来关闭池连接。为简单起见，前面的示例使用了 &lt;code>finally&lt;/code> 块，但没有使用 &lt;code>catch&lt;/code> 块。如果 &lt;code>try&lt;/code> 块中的方法抛出异常，则默认会抛出异常，无论如何都会执行 &lt;code>finally&lt;/code> 子句。&lt;/p>
&lt;h2 id="部署分布式事务">部署分布式事务&lt;/h2>
&lt;p>可以部署 &lt;code>DataSource&lt;/code> 对象来获取可在分布式事务中使用的连接。与连接池一样，必须部署两个不同的类实例：一个 &lt;code>XADataSource&lt;/code> 对象和一个为了使用它而实现的 &lt;code>DataSource&lt;/code> 对象。&lt;/p>
&lt;p>假设 Coffee Break 企业家购买的 EJB 服务器包含 &lt;code>DataSource&lt;/code> 类 &lt;code>com.applogic.TransactionalDS&lt;/code>，它与 &lt;code>XADataSource&lt;/code> 类（例如：&lt;code>com.dbaccess.XATransactionalDS&lt;/code>）一起使用。事实上，它可以与任何 &lt;code>XADataSource&lt;/code> 类一起使用，这使得 EJB 服务器可以跨 JDBC 驱动程序移植。当部署 &lt;code>DataSource&lt;/code> 和 &lt;code>XADataSource&lt;/code> 对象时，产生的连接将能够参与分布式事务。在本例中，实现了 &lt;code>com.applogic.TransactionalDS&lt;/code> 类，以便生成的连接也是池连接，这通常是作为 EJB 服务器实现的一部分提供的 &lt;code>DataSource&lt;/code> 类的情况。&lt;/p>
&lt;p>必须首先部署 &lt;code>XADataSource&lt;/code> 对象。以下代码创建 &lt;code>com.dbaccess.XATransactionalDS&lt;/code> 的实例并设置其属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XATransactionalDS&lt;/span> &lt;span class="n">xads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dbaccess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XATransactionalDS&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">xads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;creamer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">xads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDatabaseName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;COFFEEBREAK&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">xads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPortNumber&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">9040&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">xads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Distributed transactions for COFFEEBREAK DBMS&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下代码使用 JNDI 命名服务注册 &lt;code>com.dbaccess.XATransactionalDS&lt;/code> 对象 &lt;code>xads&lt;/code>。请注意，与 &lt;code>xads&lt;/code> 关联的逻辑名称在 jdbc 下添加了子上下文 &lt;code>xa&lt;/code>。Oracle 建议 &lt;code>com.dbaccess.XATransactionalDS&lt;/code> 类的任何实例的逻辑名称始终以 &lt;code>jdbc/xa&lt;/code> 开头。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/xa/distCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">xads&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，部署实现与 &lt;code>xad&lt;/code> 和其他 &lt;code>XADataSource&lt;/code> 对象交互的 &lt;code>DataSource&lt;/code> &lt;code>对象。请注意，DataSource&lt;/code> 类 &lt;code>com.applogic.TransactionalDS&lt;/code> 可以与任何 JDBC 驱动程序供应商的 &lt;code>XADataSource&lt;/code> 类一起使用。部署 &lt;code>DataSource&lt;/code> 对象涉及创建 &lt;code>com.applogic.TransactionalDS&lt;/code> 类的实例并设置其属性。&lt;code>dataSourceName&lt;/code> 属性设置为 &lt;code>jdbc/xa/distCoffeeDB&lt;/code>，即与 &lt;code>com.dbaccess.XATransactionalDS&lt;/code> 关联的逻辑名称。这是 &lt;code>XADataSource&lt;/code> 类，它为 &lt;code>DataSource&lt;/code> 类实现分布式事务功能。以下代码部署 &lt;code>DataSource&lt;/code> 类的实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applogic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TransactionalDS&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applogic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TransactionalDS&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Produces distributed transaction &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;connections to COFFEEBREAK&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDataSourceName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/xa/distCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/distCoffeeDB&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在已经部署了 &lt;code>com.applogic.TransactionalDS&lt;/code> 和 &lt;code>com.dbaccess.XATransactionalDS&lt;/code> 类的实例，应用程序可以在 &lt;code>TransactionalDS&lt;/code> 类的实例上调用 &lt;code>getConnection&lt;/code> 方法来获取与可在分布式事务中使用的 &lt;code>COFFEEBREAK&lt;/code> 数据库的连接。&lt;/p>
&lt;h2 id="使用连接进行分布式事务">使用连接进行分布式事务&lt;/h2>
&lt;p>要获得可用于分布式事务的连接，必须使用已正确实现和部署的 &lt;code>DataSource&lt;/code> 对象，如部署分布式事务部分所示。对于这样的 &lt;code>DataSource&lt;/code> 对象，调用它的 &lt;code>getConnection&lt;/code> 方法。建立连接后，就像使用任何其他连接一样使用它。由于 &lt;code>jdbc/distCoffeesDB&lt;/code> 已与 JNDI 命名服务中的 &lt;code>XADataSource&lt;/code> 对象关联，因此以下代码生成可在分布式事务中使用的 &lt;code>Connection&lt;/code> 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">DataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/distCoffeesDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当此连接作为分布式事务的一部分时，对其使用方式有一些次要但重要的限制。事务管理器控制分布式事务何时开始以及何时提交或回滚；因此，应用程序代码决不应该调用 &lt;code>Connection.commit&lt;/code> 或 &lt;code>Connection.rollback&lt;/code> 方法。应用程序同样不应该调用 &lt;code>Connection.setAutoCommit(true)&lt;/code>，这会启用自动提交模式，因为这也会干扰事务管理器对事务边界的控制。这解释了为什么在分布式事务范围内创建的新连接默认禁用其自动提交模式。请注意，这些限制仅在连接参与分布式事务时适用；当连接不是分布式事务的一部分时，没有任何限制。&lt;/p>
&lt;p>对于以下示例，假设订单的咖啡已发货，这会触发对驻留在不同 DBMS 服务器上的两个表的更新。第一个表是新的 &lt;code>INVENTORY&lt;/code> 表，第二个表是 &lt;code>COFFEES&lt;/code> 表。由于这些表位于不同的 DBMS 服务器上，因此涉及它们的事务将是分布式事务。以下示例中的代码获取连接、更新 &lt;code>COFFEES&lt;/code> 表并关闭连接，是分布式事务的第二部分。&lt;/p>
&lt;p>请注意，代码不会显式提交或回滚更新，因为分布式事务的范围由中间层服务器的底层系统基础结构控制。此外，假设用于分布式事务的连接是池连接，则应用程序使用 &lt;code>finally&lt;/code> 块来关闭连接。这样保证了即使抛出异常也会关闭有效的连接，从而保证连接返回到连接池中被回收。&lt;/p>
&lt;p>以下代码示例说明了一个企业 Bean，它是一个实现可由客户端计算机调用的方法的类。此示例的目的是演示分布式事务的应用程序代码与其他代码没有什么不同，只是它不调用 &lt;code>Connection&lt;/code> 方法 &lt;code>commit&lt;/code>、&lt;code>rollback&lt;/code> 或 &lt;code>setAutoCommit(true)&lt;/code>。因此，你无需担心了解所使用的 EJB API。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ejb.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.naming.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DistributedTransactionBean&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">SessionBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejbCreate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">CreateException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InitialContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc/distCoffeesDB&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">updateTotal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">incr&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">cofName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PreparedStatement&lt;/span> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepareStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;UPDATE COFFEES &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;SET TOTAL = TOTAL + ? &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;WHERE COF_NAME = ?&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">incr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cofName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pstmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeUpdate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">con&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Context&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="处理-sql-异常">处理 SQL 异常&lt;/h1>
&lt;h2 id="sqlexception-概述">&lt;code>SQLException&lt;/code> 概述&lt;/h2>
&lt;p>当 JDBC 与数据库交互遇到错误时，它抛出一个 &lt;code>SQLException&lt;/code> 实例而不是 &lt;code>Exception&lt;/code>。此上下文中的数据源表示 &lt;code>Connection&lt;/code> 对象所连接的数据库。&lt;code>SQLException&lt;/code> 实例包含以下信息，可以帮助你推断造成错误的原因：&lt;/p>
&lt;ul>
&lt;li>错误的描述。通过调用 &lt;code>SQLException.getMessage&lt;/code> 方法获取 &lt;code>String&lt;/code> 类型的描述。&lt;/li>
&lt;li>&lt;code>SQLState&lt;/code> 代码。这些代码及其含义已由 ISO/ANSI 和 Open Group (X/Open) 标准化，尽管有些代码已保留给数据库供应商自行定义。该 &lt;code>String&lt;/code> 对象由五个字母数字字符组成。通过调用 &lt;code>SQLException.getSQLState&lt;/code> 方法获取此代码。&lt;/li>
&lt;li>引起此异常的原因。&lt;code>SQLException&lt;/code> 实例可能具有因果关系，该关系由导致抛出 &lt;code>SQLException&lt;/code> 实例的一个或多个 &lt;code>Throwable&lt;/code> 对象组成。要获取此原因链，递归地调用 &lt;code>SQLException.getCause&lt;/code> 方法直到返回 &lt;code>null&lt;/code> 值。&lt;/li>
&lt;li>对任何链式（chained）异常的引用。如果发生多个错误，则通过该链引用异常。通过对引发的异常调用方法 &lt;code>SQLException.getNextException&lt;/code> 来获取异常。&lt;/li>
&lt;/ul>
&lt;h2 id="获取异常">获取异常&lt;/h2>
&lt;p>以下方法 &lt;code>JDBCTutorialUtilities.printSQLException&lt;/code> 输出 &lt;code>SQLException&lt;/code> 中包含的 &lt;code>SQLState&lt;/code>、错误代码、错误描述和原因（如果有）以及链接到它的任何其他异常：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printSQLException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SQLException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ignoreSQLException&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">((&lt;/span>&lt;span class="n">SQLException&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getSQLState&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SQLState: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">((&lt;/span>&lt;span class="n">SQLException&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getSQLState&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Error Code: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">((&lt;/span>&lt;span class="n">SQLException&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getErrorCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Message: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Throwable&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Cause: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCause&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如，如果你使用 Java DB 作为 DBMS 并调用方法 &lt;code>CoffeesTable.dropTable&lt;/code>。表 &lt;code>COFFEES&lt;/code> 不存在，并且你删除了对 &lt;code>JDBCTutorialUtilities.ignoreSQLException&lt;/code> 的调用，则将输出类似于以下的内容：&lt;/p>
&lt;pre tabindex="0">&lt;code>SQLState: 42Y55
Error Code: 30000
Message: &amp;#39;DROP TABLE&amp;#39; cannot be performed on
&amp;#39;TESTDB.COFFEES&amp;#39; because it does not exist.
&lt;/code>&lt;/pre>&lt;p>你可以先获取 &lt;code>SQLState&lt;/code>，然后相应地处理 &lt;code>SQLException&lt;/code>，而不是打印 &lt;code>SQLException&lt;/code> 信息。例如，如果 &lt;code>SQLState&lt;/code> 等于代码 42Y55（并且你使用 Java DB 作为 DBMS），则 &lt;code>JDBCTutorialUtilities.ignoreSQLException&lt;/code> 方法将返回 &lt;code>true&lt;/code>，这会导致 &lt;code>JDBCTutorialUtilities.printSQLException&lt;/code> 忽略 &lt;code>SQLException&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">ignoreSQLException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sqlState&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">sqlState&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The SQL state is not defined!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// X0Y32: Jar file already exists in schema
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">sqlState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;X0Y32&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 42Y55: Table already exists in schema
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">sqlState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;42Y55&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取警告">获取警告&lt;/h2>
&lt;p>&lt;code>SQLWarning&lt;/code> 对象是处理数据库访问警告的 &lt;code>SQLException&lt;/code> 的子类。警告不会像异常那样停止应用程序的执行；它们只是提醒用户某些事情没有按计划发生。例如，警告可能会让你知道尝试撤销的权限并未被撤销。或者警告可能会告诉你在请求的断开连接期间发生了错误。&lt;/p>
&lt;p>可以在 &lt;code>Connection&lt;/code> &lt;code>对象、Statement&lt;/code> 对象（包括 &lt;code>PreparedStatement&lt;/code> 和 &lt;code>CallableStatement&lt;/code> 对象）或 &lt;code>ResultSet&lt;/code> 对象上报告警告。这些类中的每一个都有一个 &lt;code>getWarnings&lt;/code> 方法，你必须调用该方法才能查看调用对象上报告的第一个警告。如果 &lt;code>getWarnings&lt;/code> 返回警告，你可以对其调用 &lt;code>SQLWarning&lt;/code> 方法 &lt;code>getNextWarning&lt;/code> 来获取任何其他警告。执行语句会自动清除先前语句中的警告，因此它们不会累积。但是，这意味着如果你想要检索一条语句上报告的警告，则必须在执行另一条语句之前执行此操作。&lt;/p>
&lt;p>&lt;code>JDBCTutorialUtilities.java&lt;/code> 中的以下方法说明了如何获取有关 &lt;code>Statement&lt;/code> 或 &lt;code>ResultSet&lt;/code> 对象上报告的任何警告的完整信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getWarningsFromResultSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JDBCTutorialUtilities&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWarnings&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getWarningsFromStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JDBCTutorialUtilities&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWarnings&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SQLWarning&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">warning&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n---Warning---\n&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">warning&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Message: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SQLState: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSQLState&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Vendor error code: &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">warning&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getErrorCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">warning&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getNextWarning&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最常见的警告是 &lt;code>DataTruncation&lt;/code> 警告，它是 &lt;code>SQLWarning&lt;/code> 的子类。所有 &lt;code>DataTruncation&lt;/code> 对象的 &lt;code>SQLState&lt;/code> 均为 01004，表示读取或写入数据时出现问题。&lt;code>DataTruncation&lt;/code> 方法可让您找出哪个列或参数数据被截断、截断是在读操作还是写操作上、应该传输多少字节以及实际传输了多少字节。&lt;/p>
&lt;h2 id="sql-异常分类">SQL 异常分类&lt;/h2>
&lt;p>JDBC 驱动程序可能会抛出 &lt;code>SQLException&lt;/code> 的子类，该子类对应于公共 &lt;code>SQLState&lt;/code> 或与特定 &lt;code>SQLState&lt;/code> 类值不关联的公共错误状态。这使你能够编写更可移植的错误处理代码。这些异常是以下类之一的子类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SQLNonTransientException&lt;/code>&lt;/li>
&lt;li>&lt;code>SQLTransientException&lt;/code>&lt;/li>
&lt;li>&lt;code>SQLRecoverableException&lt;/code>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>有关这些子类的更多信息，请参阅 &lt;code>java.sql&lt;/code> 包的最新 Javadoc 或 JDBC 驱动程序的文档。&lt;/p>
&lt;h2 id="sqlexception-其它子类">&lt;code>SQLException&lt;/code> 其它子类&lt;/h2>
&lt;p>还可以抛出 SQLException 的以下子类：&lt;/p>
&lt;ul>
&lt;li>当批量更新操作发生错误时，会抛出 &lt;code>BatchUpdateException&lt;/code>。除了 &lt;code>SQLException&lt;/code> 提供的信息之外，&lt;code>BatchUpdateException&lt;/code> 还提供错误发生之前执行的所有语句的更新计数。&lt;/li>
&lt;li>当无法在连接上设置一个或多个客户端信息属性时，将引发 &lt;code>SQLClientInfoException&lt;/code>。除了 &lt;code>SQLException&lt;/code> 提供的信息之外，&lt;code>SQLClientInfoException&lt;/code> 还提供未设置的客户端信息属性的列表。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="使用-preparedstatement">使用 &lt;code>PreparedStatement&lt;/code>&lt;/h1>
&lt;h2 id="preparedstatement-概述">&lt;code>PreparedStatement&lt;/code> 概述&lt;/h2>
&lt;p>在某些情况下，使用 &lt;code>PreparedStatement&lt;/code> 对象向数据库发送 SQL 语句更加方便。这种特殊类型的语句派生自更通用的 &lt;code>Statement&lt;/code> 类。&lt;/p></description></item><item><title>Java 模块化</title><link>https://ileonli.github.io/posts/java/module/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/module/</guid><description>&lt;p>Java 9 中引入了模块化，称为 Java Platform Module System，模块在包的级别上引出了更高级别的组合方式。一个 Java 模块可以指定它所包含的哪些 Java 包对其他 Java 模块可见。Java 模块还必须指定需要哪些 Java 模块来完成其工作。&lt;/p>
&lt;p>使用 Java 模块有以下优势：&lt;/p>
&lt;h2 id="使用模块">使用模块&lt;/h2>
&lt;p>我们使用 Maven 创建项目，项目结构如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">untitled/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── pom.xml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   ├── java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   ├── io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   │   └── github
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   │   └── ileonli
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   │   └── Main.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   └── module-info.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   └── resources
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以在 &lt;code>module-info.java&lt;/code> 里设置模块名、添加或导出模块。&lt;/p>
&lt;p>本项目的模块名设为：&lt;code>io.github.ileonli.untitled&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">module&lt;/span> &lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ileonli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">untitled&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>java --list-modules&lt;/code> 可以列出 JDK 的模块集。其中包括实现 Java 语言 SE 规范的标准模块（以 java 开头的名称）、JavaFX 模块（以 javafx 开头的名称）、特定于 JDK 的模块（以 jdk 开头的名称）和特定于 Oracle 的模块（以 oracle 开头的名称）。每个模块名称后都接着一个版本字符串 — @17 表示该模块属于 Java 17。&lt;/p>
&lt;pre tabindex="0">&lt;code>java.base@17.0.7
java.compiler@17.0.7
java.datatransfer@17.0.7
java.desktop@17.0.7
java.instrument@17.0.7
java.logging@17.0.7
java.management@17.0.7
java.management.rmi@17.0.7
java.naming@17.0.7
java.net.http@17.0.7
java.prefs@17.0.7
java.rmi@17.0.7
java.scripting@17.0.7
java.se@17.0.7
java.security.jgss@17.0.7
java.security.sasl@17.0.7
java.smartcardio@17.0.7
java.sql@17.0.7
java.sql.rowset@17.0.7
java.transaction.xa@17.0.7
java.xml@17.0.7
java.xml.crypto@17.0.7
jdk.accessibility@17.0.7
jdk.attach@17.0.7
jdk.charsets@17.0.7
jdk.compiler@17.0.7
jdk.crypto.cryptoki@17.0.7
jdk.crypto.ec@17.0.7
jdk.dynalink@17.0.7
jdk.editpad@17.0.7
jdk.hotspot.agent@17.0.7
jdk.httpserver@17.0.7
jdk.incubator.foreign@17.0.7
jdk.incubator.vector@17.0.7
jdk.internal.ed@17.0.7
jdk.internal.jvmstat@17.0.7
jdk.internal.le@17.0.7
jdk.internal.opt@17.0.7
jdk.internal.vm.ci@17.0.7
jdk.internal.vm.compiler@17.0.7
jdk.internal.vm.compiler.management@17.0.7
jdk.jartool@17.0.7
jdk.javadoc@17.0.7
jdk.jcmd@17.0.7
jdk.jconsole@17.0.7
jdk.jdeps@17.0.7
jdk.jdi@17.0.7
jdk.jdwp.agent@17.0.7
jdk.jfr@17.0.7
jdk.jlink@17.0.7
jdk.jpackage@17.0.7
jdk.jshell@17.0.7
jdk.jsobject@17.0.7
jdk.jstatd@17.0.7
jdk.localedata@17.0.7
jdk.management@17.0.7
jdk.management.agent@17.0.7
jdk.management.jfr@17.0.7
jdk.naming.dns@17.0.7
jdk.naming.rmi@17.0.7
jdk.net@17.0.7
jdk.nio.mapmode@17.0.7
jdk.random@17.0.7
jdk.sctp@17.0.7
jdk.security.auth@17.0.7
jdk.security.jgss@17.0.7
jdk.unsupported@17.0.7
jdk.unsupported.desktop@17.0.7
jdk.xml.dom@17.0.7
jdk.zipfs@17.0.7
&lt;/code>&lt;/pre>&lt;h2 id="模块关键字">模块关键字&lt;/h2>
&lt;h3 id="requires">requires&lt;/h3>
&lt;p>requires 用于导入其它模块，&lt;code>requires 模块名&lt;/code>&lt;/p>
&lt;p>默认情况下，所有其他模块都依赖于 &lt;code>java.base&lt;/code> 模块。&lt;/p>
&lt;h3 id="exports">exports&lt;/h3>
&lt;p>exports 用于指定模块下的哪些包对外可见，&lt;code>exports 包名&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.oracle.com/corporate/features/understanding-java-9-modules.html">https://www.oracle.com/corporate/features/understanding-java-9-modules.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://openjdk.org/projects/jigsaw/">https://openjdk.org/projects/jigsaw/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jenkov.com/tutorials/java/modules.html">https://jenkov.com/tutorials/java/modules.html&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java SPI 机制</title><link>https://ileonli.github.io/posts/java/spi/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/spi/</guid><description>&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;p>为使用 Java 操作数据库，我们需要提供驱动程序。为支持多种数据库（如：MySQL、PostgreSQL、Oracle），提供 &lt;code>DatabaseBaseDriver&lt;/code> 接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">DatabaseBaseDriver&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过实现 &lt;code>DatabaseBaseDriver&lt;/code> 接口，分别创建了操作 &lt;code>MySQL&lt;/code> 和 &lt;code>PostgreSQL&lt;/code> 数据库的驱动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MysqlDriver&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;open MySQL connection&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;close MySQL connection&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PostgresqlDriver&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;open PostgreSQL connection&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;close PostgreSQL connection&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;postgresql&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为方便对数据库驱动的管理和使用，对驱动的所有操作均使用 &lt;code>DatabaseBaseDriverManager&lt;/code> 类。&lt;/p>
&lt;ul>
&lt;li>&lt;code>getDrivers&lt;/code> 方法用于获取注册到 Manager 中的所有驱动。&lt;/li>
&lt;li>&lt;code>getDriverByName&lt;/code> 方法通过保存的名称获取保存到 Manager 中的驱动。&lt;/li>
&lt;li>&lt;code>registerDriver&lt;/code> 方法用于注册驱动到 Manager 中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseBaseDriverManager&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">drivers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getDrivers&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">storedDrivers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">storedDrivers&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="nf">getDriverByName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">registerDriver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SDatabaseBaseDriver&lt;/span> &lt;span class="n">driver&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">driver&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们需要使用 MySQL 时，需要在使用驱动前通过 &lt;code>registerDriver&lt;/code> 方法注册 MySQL 驱动实例。&lt;/p>
&lt;p>在使用数据库时，先通过 &lt;code>getDriverByName&lt;/code> 获取驱动实例，再通过获取到的驱动实例操作数据库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="n">mysql&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseBaseDriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDriverByName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mysql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// use given sql to operate db
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mysql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseBaseDriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerDriver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MysqlDriver&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SELECT * FROM `user`&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时的代码耦合度很高，当添加或删除驱动时，就需要更改代码。有没有机制可以允许我们不直接在程序里直接指明，而由具体的实现动态装配呢？&lt;/p>
&lt;hr>
&lt;p>Java 6 引入了 SPI（Service Provider Interface）机制，用于加载服务的实现，使用步骤具体如下：&lt;/p>
&lt;ol>
&lt;li>在 resources 文件夹中新建 &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html">META-INF&lt;/a> 文件夹。&lt;/li>
&lt;li>在 META-INF 文件夹中创建 services 文件夹。&lt;/li>
&lt;li>在 services 文件夹中创建名为接口全类名的文件，并在此文件中添加提供服务实现的类的全类名。&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>resources
└─META-INF
└─services
└─org.example.DatabaseBaseDriver
org.example.MysqlDriver
org.example.PostgresqlDriver
&lt;/code>&lt;/pre>&lt;p>改造 &lt;code>DatabaseBaseDriverManager&lt;/code> 类，在获取驱动实例前，通过 &lt;code>ensureInitialized&lt;/code> 方法确保驱动实例已经初始化。&lt;/p>
&lt;p>&lt;code>ServiceLoader&lt;/code> 在加载接口时，会去 META-INF/services 下找接口的全限定类名文件，再根据里面的内容加载相应的实现类。&lt;/p>
&lt;p>通过 &lt;code>Iterator&lt;/code> 调用 &lt;code>next()&lt;/code> 方法迭代时，会使用反射动态创建具体的实现类，具体逻辑流程在 &lt;code>java.util.ServiceLoader.ProviderImpl#newInstance&lt;/code> 方法中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseBaseDriverManager&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">drivers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">isInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ensureInitialized&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isInit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// drivers have not initialize
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">itr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">itr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="n">driver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">itr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">registerDriver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isInit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareAndSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getDrivers&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ensureInitialized&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">storedDrivers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">storedDrivers&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="nf">getDriverByName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ensureInitialized&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">registerDriver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="n">driver&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">drivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">putIfAbsent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">driver&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在使用 SPI 技术后，可以直接获取驱动，无需使用代码添加驱动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseBaseDriver&lt;/span> &lt;span class="n">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">=&lt;/span> &lt;span class="n">DatabaseBaseDriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDriverByName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mysql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mysql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="jdk-中的-drivermanager">JDK 中的 DriverManager&lt;/h2>
&lt;p>第二种改进的方法正是 JDK 中 &lt;code>java.sql.DriverManager&lt;/code> 类所作的操作。&lt;/p>
&lt;p>代码片段截取自 &lt;code>java.sql.DriverManager&lt;/code> 类中 &lt;code>ensureDriversInitialized&lt;/code> 方法，省略非关键代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">loadedDrivers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ServiceLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">driversIterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loadedDrivers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Load these drivers, so that they can be instantiated.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * It may be the case that the driver class may not be there
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * i.e. there may be a packaged driver with the service class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * as implementation of java.sql.Driver but the actual class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * may be missing. In that case a java.util.ServiceConfigurationError
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * will be thrown at runtime by the VM trying to locate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * and load the service.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Adding a try catch block to catch those runtime errors
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * if driver not available in classpath but it&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * packaged as service and that service is there in classpath.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">driversIterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">driversIterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do nothing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="具体应用">具体应用&lt;/h2>
&lt;h3 id="插件">插件&lt;/h3>
&lt;p>插件只需要实现系统所提供的插件接口，再通过 SPI 技术即可方便的装载。&lt;/p>
&lt;h3 id="数据库驱动">数据库驱动&lt;/h3>
&lt;p>JDK 中提供了 &lt;code>java.sql.Driver&lt;/code> 接口，所有的驱动类必须实现，同时提供了 &lt;code>java.sql.DriverManager&lt;/code> 管理所有的驱动。&lt;/p>
&lt;p>可以看到 MySQL 驱动使用了 SPI 机制，&lt;code>java.sql.Driver&lt;/code> 文件中内容为 &lt;code>com.mysql.cj.jdbc.Driver&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://ileonli.github.io/img/java/spi/mysql-driver-spi.png" alt="">&lt;/p>
&lt;p>&lt;code>com.mysql.cj.jdbc.Driver&lt;/code> 类使用静态代码块注册到 &lt;code>java.sql.DriverManager&lt;/code> 中，在第一次类加载时运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Driver&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">NonRegisteringDriver&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Driver&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Register ourselves with the DriverManager
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerDriver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Driver&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SQLException&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Can&amp;#39;t register driver!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Construct a new driver and register it with DriverManager
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * if a database error occurs.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Driver&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Required for Class.forName().newInstance()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PostgreSQL 驱动同样如此。&lt;/p>
&lt;p>&lt;img src="https://ileonli.github.io/img/java/spi/postgresql-driver-spi.png" alt="">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>可以通过 SPI 机制可以很方便进行系统解耦，提供程序的可扩展性。该机制同时也是”约定大于配置“思想的体现。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/ext/basics/spi.html">https://docs.oracle.com/javase/tutorial/ext/basics/spi.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/java-spi">https://www.baeldung.com/java-spi&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 泛型</title><link>https://ileonli.github.io/posts/java/generic/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/generic/</guid><description>&lt;p>泛型本质即把内部数据类型参数化，可以减少额外代码的编写。&lt;/p>
&lt;p>尖括号之间的叫做类型参数（type parameter），通常采用单字母，大写的方式。&lt;/p>
&lt;p>类型参数常用的字母包括：E（集合框架内元素）、K（key）、V（value）、N（number）、T（type）、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">K&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Pair&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="泛型方法">泛型方法&lt;/h2>
&lt;p>泛型方法拥有独立泛型参数，可以有非静态和静态两种方式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Util&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// non-static method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Util&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Util&lt;/span>&lt;span class="o">.&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参数限定">参数限定&lt;/h2>
&lt;p>使用 &lt;code>extends&lt;/code> 限定传入的泛型参数必须“继承”或“实现”自指定的“类”或“接口”。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以采用 &lt;code>&amp;lt;T extends A &amp;amp; B &amp;amp; C&amp;gt;&lt;/code> 的方法指定多个类型参数限定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Number&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Cloneable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类型参数限定支持多接口，由于 Java 只支持单继承，因此，只能有一个类限定，且必须放在首位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error: Interface expected here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Cloneable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Number&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通配符">通配符&lt;/h2>
&lt;p>通配符（?）可以用来表示未知类型。&lt;/p>
&lt;p>&lt;code>extends&lt;/code> 允许传入类型为 &lt;code>Number&lt;/code> 或 &lt;code>Number&lt;/code> 子类的 &lt;code>List&lt;/code> 类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">sumOfList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Number&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Number&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doubleValue&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>supper&lt;/code> 运算符允许传入类型为 &lt;code>Integer&lt;/code> 或 &lt;code>Integer&lt;/code> 父类的 &lt;code>List&lt;/code> 类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addNumbers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="类型擦除">类型擦除&lt;/h2>
&lt;p>&lt;code>Number&lt;/code> 是 &lt;code>Integer&lt;/code> 的父类，但 &lt;code>ArrayList&amp;lt;Number&amp;gt;&lt;/code> 不是 &lt;code>ArrayList&amp;lt;Integer&amp;gt;&lt;/code> 的父类，而是同一种类型。&lt;/p>
&lt;p>&lt;code>List&amp;lt;Number&amp;gt;&lt;/code> 是 &lt;code>ArrayList&amp;lt;Number&amp;gt;&lt;/code> 的父类，而不是 &lt;code>ArrayList&amp;lt;Integer&amp;gt;&lt;/code> 的父类。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/java/generics/types.html">https://docs.oracle.com/javase/tutorial/java/generics/types.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://openjdk.org/projects/valhalla/">https://openjdk.org/projects/valhalla/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://openjdk.org/jeps/218">https://openjdk.org/jeps/218&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 枚举类型</title><link>https://ileonli.github.io/posts/java/enum/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/enum/</guid><description>&lt;blockquote>
&lt;p>枚举类型（enum type）是由一组常量组合而成&lt;/p>
&lt;/blockquote>
&lt;p>在引入枚举类型之前，通常用一组 int 常量表示每种类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Color&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">RED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">GREEN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">BLACK&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用 int 常量表示的方法不具有类型安全性。方法只能接收 int 类型，不同 int 值表示不同的 &lt;code>Color&lt;/code>，此时无法严格控制入参，很容易出现类型错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java SE 1.5 版本引用了枚举类型，使用 &lt;code>enum&lt;/code> 关键字修饰。在编译期间，编译器会对枚举类型进行修改和扩展。&lt;/p>
&lt;p>枚举常量（如：RED）会隐式使用 &lt;code>public static final&lt;/code> 修饰（编译器修改），按照 Java 命名规范，所有名称都应该采用大写的形式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Color&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BLACK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>枚举常量可以额外增加属性，只需声明成员属性，并添加具有所有属性的构造器。&lt;/p>
&lt;p>枚举常量是不可变的，因此，推荐使用 final 和 private 修饰成员属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Color&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;#FF0000&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;红色&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GREEN&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;#008000&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;绿色&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BLACK&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;#000000&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;黑色&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">rgb&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Color&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">rgb&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rgb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rgb&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用方法">常用方法&lt;/h2>
&lt;blockquote>
&lt;p>values() 和 valueOf(String name) 方法都由编译器在编译期间生成&lt;/p>
&lt;/blockquote>
&lt;p>通过 &lt;code>values()&lt;/code> 方法获取到当前枚举类型内声明的所有枚举常量，会按照声明的顺序返回数组。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Color&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>valueOf(String name)&lt;/code> 返回具有指定名称的枚举常量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Color&lt;/span> &lt;span class="n">red&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;RED&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>ordinal()&lt;/code> 方法可以获取与枚举常量相关联的 int 值，该值是在枚举类型内声明的位置（从 0 开始）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Operation&lt;/span> &lt;span class="n">op&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Operation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ord&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该尽量避免直接使用关联的值，当新增或删除枚举常量后，会导致其它枚举常量的关联值发生变化。该方法设计的目的是供 &lt;code>EnumMap&lt;/code> 和 &lt;code>EnumSet&lt;/code> 使用。&lt;/p>
&lt;p>我们可以通过位置相对大小来确定额外的信息，如：根据声明位置的大小判断是否具有管理员权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Role&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">USER&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">VIP&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ADMIN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SUPER_ADMIN&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasAdminRole&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Role&lt;/span> &lt;span class="n">role&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">role&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">role&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">Role&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ADMIN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="方法绑定">方法绑定&lt;/h2>
&lt;p>当我们需要将不同的方法与每个枚举常量关联起来时，常见的做法是使用 &lt;code>switch&lt;/code> 进行判断。&lt;/p>
&lt;p>当在枚举中添加新的类型时，很容易忘记在 &lt;code>color&lt;/code> 方法中添加新的分支。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">RED&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">GREEN&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;green&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">BLACK&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Unknown color&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java SE 1.6 版本引入了类主体（class body），可以将不同方法与枚举关联起来。&lt;/p>
&lt;p>当枚举中添加新的类型而不添加类主体，编译器会拒绝编译。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="n">Operation&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PLUS&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MINUS&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TIMES&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DIVIDED_BY&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Each constant supports an arithmetic operation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译后枚举类型内的每个类主体都会生成一个独立类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Operation$1.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation$2.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation$3.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation$4.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 javap 命令反编译生成的字节码文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="n">Operation$1&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Operation$1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java 8 之后可以结合 lambda 表达式进行简化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.function.BiFunction&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="n">Operation&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ADD&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SUBTRACT&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MULTIPLY&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">BiFunction&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Operation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BiFunction&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">operation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="比较">比较&lt;/h2>
&lt;p>如 JLS 所说，保证枚举类型只会被实例化一次，采取以下三种方法确保枚举类型无法被实例化多次。&lt;/p>
&lt;ol>
&lt;li>&lt;code>Enum&lt;/code> 类中继承自 Object 类的 &lt;code>clone&lt;/code> 方法会被设置为 final，无法重写。&lt;/li>
&lt;li>禁止利用反射方法实例化。&lt;/li>
&lt;li>对于序列化机制的特殊处理，确保不会通过反序列化实例化。&lt;/li>
&lt;/ol>
&lt;p>基于以上机制，我们可以直接使用 == 比较枚举常量，&lt;code>Enum&lt;/code> 类中的 &lt;code>equals&lt;/code> 方法也是直接采用 == 比较。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// java.lang.Enum#equals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>推荐直接使用 == 判断枚举常量是否相同，此方法不会发生空指针异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Color&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">boolean&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BLACK&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// NPE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="n">b2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BLACK&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="enum-类">Enum 类&lt;/h2>
&lt;p>Java 中所有的枚举类型都会隐式的继承 &lt;code>java.lang.Enum&lt;/code> 类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Constable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Serializable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="枚举集合">枚举集合&lt;/h2>
&lt;h3 id="enummap">EnumMap&lt;/h3>
&lt;p>&lt;code>EnumMap&lt;/code> 只能用于存放一种枚举类型，在构造器中必须指定存放的枚举类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">enumMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EnumMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GREEN&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;green&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BLACK&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnumMap&lt;/code> 内部维护了 &lt;code>vals&lt;/code> 数组，长度为给定的枚举类型内部枚举常量的数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">transient&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>put&lt;/code> 方法直接通过 &lt;code>ordinal()&lt;/code> 算出索引，不需要通过 &lt;code>hashCode()&lt;/code> 计算。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typeCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maskNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">oldValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">unmaskNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">oldValue&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enumset">EnumSet&lt;/h3>
&lt;p>&lt;code>EnumSet&lt;/code> 同样只能用于存放一种枚举类型，通过 &lt;code>noneOf(Class&amp;lt;E&amp;gt; elementType)&lt;/code>、&lt;code>allOf(Class&amp;lt;E&amp;gt; elementType)&lt;/code> 和 &lt;code>of(...)&lt;/code> 等工厂方法创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">enumSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EnumSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">noneOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GREEN&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">enumSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BLACK&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnumSet&lt;/code> 为抽象类，根据枚举常量的数量提供了两种不同子类，当枚举常量的数量小于等于 64 时使用 &lt;code>RegularEnumSet&lt;/code>，其他数量采用 &lt;code>JumboEnumSet&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">EnumSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">noneOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">elementType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Enum&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">universe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUniverse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">elementType&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">universe&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassCastException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">elementType&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; not an enum&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">universe&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RegularEnumSet&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">elementType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">universe&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JumboEnumSet&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">elementType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">universe&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="regularenumset">RegularEnumSet&lt;/h4>
&lt;p>&lt;code>RegularEnumSet&lt;/code> 直接采用位图，利用 &lt;code>long&lt;/code> 类型的 &lt;code>elements&lt;/code> 记录是否保存有某个枚举常量。&lt;/p>
&lt;p>因为 &lt;code>long&lt;/code> 类型共 8 个字节，共 64 位，因此，最多保存 64 个枚举常量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">elements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0L&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>add&lt;/code> 方法通过或运算将 &lt;code>elements&lt;/code> 第 &lt;code>ordinal()&lt;/code> 位的二进制设置为 1，代表已经添加过该枚举常量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typeCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">oldElements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elements&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elements&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mi">1L&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;)&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">elements&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">oldElements&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="jumboenumset">JumboEnumSet&lt;/h4>
&lt;p>为保存含有更多枚举常量的枚举类型，&lt;code>JumboEnumSet&lt;/code> 采用 &lt;code>elements[]&lt;/code> 数组。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">elements&lt;/span>&lt;span class="o">[];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> 为逻辑右移，不考虑符号位，&lt;code>a &amp;gt;&amp;gt;&amp;gt; 6&lt;/code> 相当于 &lt;code>a / (2^6)&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">JumboEnumSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">elementType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">universe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">elementType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">universe&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">long&lt;/span>&lt;span class="o">[(&lt;/span>&lt;span class="n">universe&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">63&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相比于 &lt;code>RegularEnumSet&lt;/code> 类的 &lt;code>add&lt;/code> 方法，&lt;code>JumboEnumSet&lt;/code> 仅仅多了一步计算数组索引的操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typeCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">eOrdinal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ordinal&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">eWordNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eOrdinal&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">oldElements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elements&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">eWordNum&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elements&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">eWordNum&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mi">1L&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">eOrdinal&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">elements&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">eWordNum&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">oldElements&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;ol>
&lt;li>枚举类型没有可以访问的构造器，因此，不可以实例化。且保证枚举类型只会被实例化一次。&lt;/li>
&lt;li>枚举类型不可继承，因为枚举类型默认会继承 &lt;code>Enum&lt;/code> 类，且 Java 只支持单继承。&lt;/li>
&lt;li>枚举类型可以实现接口，利用接口的 &lt;code>default&lt;/code> 方法扩展功能。&lt;/li>
&lt;li>枚举类型内定义的枚举常量可以直接通过 == 进行比较，推荐使用 == 方法。&lt;/li>
&lt;li>保存枚举常量时推荐使用 &lt;code>EnumMap&lt;/code> 和 &lt;code>EnumSet&lt;/code> 代替 &lt;code>HashMap&lt;/code> 和 &lt;code>HashSet&lt;/code>。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.9">https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.9&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#axzz7sctrlkdb">https://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#axzz7sctrlkdb&lt;/a>&lt;/p>
&lt;p>Effective Java, Third Edition&lt;/p>
&lt;/blockquote></description></item></channel></rss>