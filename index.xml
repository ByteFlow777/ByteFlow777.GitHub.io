<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About Me on Leon&#39;s Blog</title>
    <link>https://byteflow777.github.io/</link>
    <description>Recent content in About Me on Leon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://byteflow777.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AVL Tree</title>
      <link>https://byteflow777.github.io/docs/data-structure/avl-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/data-structure/avl-tree/</guid>
      <description>AVL Tree AVL Tree  </description>
    </item>
    
    <item>
      <title>Lab 1</title>
      <link>https://byteflow777.github.io/docs/lab-report/CMU-15-445/lab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/lab-report/CMU-15-445/lab1/</guid>
      <description>Lab 1 Exercise 1 Exercise 1 需要我们完成以下文件的代码：
 src/java/simpledb/storage/TupleDesc.java src/java/simpledb/storage/Tuple.java  User 表如下所示：
id(INT) name(STRING) age(INT) 1 &amp;quot;张三&amp;quot; 12 2 &amp;quot;李四&amp;quot; 22 3 &amp;quot;王二&amp;quot; 54 Tuple.java 表示表中的某一行数据，如：User(1, &amp;ldquo;张三&amp;rdquo;, 12), User(2, &amp;ldquo;李四&amp;rdquo;, 22)
TupleDesc.java 表示表中字段的类型和名称，如：User{id(INT), name(STRING), age(INT)}
TupleDesc.java TupleDesc.java 中的静态内部类 TDItem 用于表示某字段的类型（Type fieldType）和名称（String fieldName）。
public static class TDItem implements Serializable { private static final long serialVersionUID = 1L; /** * The type of the field */ public final Type fieldType; /** * The name of the field */ public final String fieldName; public TDItem(Type t, String n) { this.</description>
    </item>
    
    <item>
      <title>Lab 1</title>
      <link>https://byteflow777.github.io/docs/lab-report/MIT-6.830/lab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/lab-report/MIT-6.830/lab1/</guid>
      <description>Lab 1 Exercise 1 Exercise 1 需要我们完成以下文件的代码：
 src/java/simpledb/storage/TupleDesc.java src/java/simpledb/storage/Tuple.java  User 表如下所示：
id(INT) name(STRING) age(INT) 1 &amp;quot;张三&amp;quot; 12 2 &amp;quot;李四&amp;quot; 22 3 &amp;quot;王二&amp;quot; 54 Tuple.java 表示表中的某一行数据，如：User(1, &amp;ldquo;张三&amp;rdquo;, 12), User(2, &amp;ldquo;李四&amp;rdquo;, 22)
TupleDesc.java 表示表中字段的类型和名称，如：User{id(INT), name(STRING), age(INT)}
TupleDesc.java TupleDesc.java 中的静态内部类 TDItem 用于表示某字段的类型（Type fieldType）和名称（String fieldName）。
public static class TDItem implements Serializable { private static final long serialVersionUID = 1L; /** * The type of the field */ public final Type fieldType; /** * The name of the field */ public final String fieldName; public TDItem(Type t, String n) { this.</description>
    </item>
    
    <item>
      <title>LSM Tree</title>
      <link>https://byteflow777.github.io/docs/data-structure/log-structured-merge-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/data-structure/log-structured-merge-tree/</guid>
      <description>LSM Tree </description>
    </item>
    
    <item>
      <title>Skip List</title>
      <link>https://byteflow777.github.io/docs/data-structure/skip-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/data-structure/skip-list/</guid>
      <description>SkipList </description>
    </item>
    
    <item>
      <title>SSTable</title>
      <link>https://byteflow777.github.io/docs/data-structure/sorted-string-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/data-structure/sorted-string-table/</guid>
      <description>SSTable </description>
    </item>
    
    <item>
      <title>分布式系统基本理论</title>
      <link>https://byteflow777.github.io/docs/distributed-system/basic-theory-of-distributed-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/distributed-system/basic-theory-of-distributed-system/</guid>
      <description>分布式系统基本理论 拜占庭将军问题 拜占庭将军问题（Byzantine Generals Problem）是 Leslie Lamport 在论文 The Byzantine Generals Problem 中提出，是对分布式系统中面临问题的抽象描述。  CAP CAP 定理  BASE ACID 一致性 </description>
    </item>
    
    <item>
      <title>分布式共识算法</title>
      <link>https://byteflow777.github.io/docs/distributed-system/consensus-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/distributed-system/consensus-algorithm/</guid>
      <description>分布式一致性算法 Raft 算法是 Stanford University 的 Diego Ongaro 的博士论文，是分布式一致性算法的一种，相比于 Paxos 算法更易于理解，使用该算法的项目有：TiKV, etcd, CockroachDB 等
官方地址：https://raft.github.io/
 时间 (Terms) 分布式系统中节点的时间是不可靠的，如不采取特殊硬件，节点与节点之间时间是存在一定的误差。如果采用时间作为判断操作的先后顺序，即使是很细微的误差仍然会导致误判。因此 Raft 把时间划分为不同的 terms（任期），term 类似于逻辑时钟，可以用于判断事件发生的先后顺序。
如果当前节点接收到较大 term 节点的请求，则说明当前节点已经落后于请求的节点，需要转为 Follower 状态，并把当前 term 更新为较大的 term。
 角色 (states) Raft 中的节点始终处于 Follower | Candidate | Leader 三种状态之一，不同状态之间根据不同的触发条件进行相互转换。
  跟随者 (Follower) ：当节点启动后，此时节点为 Follower 状态，在一定时间内（300~500ms）如果没有收到来自 Leader 的心跳包，此时称为选举超时（election timeout），当前节点则会转为 Candidate 状态 候选者 (Candidate) ：当转为 Candidate 状态后，Candidate 节点会先投自己，然后向集群中的其它节点（不包含自己）发送投票请求，请求获取投票。如果集群中超过一半的节点同意该投票请求，该 Candidate 节点就会转为Leader 状态 领导者 (Leader) ：当节点转为 Leader 状态后，会定时给集群中的所有节点发送心跳包，维护其 Leader 状态。Leader 节点会处理来自 clients 的所有请求，当集群中处于其它状态的节点接收到来自 clients 的请求后，会转发给 Leader 进行处理  保证一致性 Raft 把保证一致性问题分为三个相对独立的子问题：</description>
    </item>
    
    <item>
      <title>分布式事务处理</title>
      <link>https://byteflow777.github.io/docs/distributed-system/distributed-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/distributed-system/distributed-transaction/</guid>
      <description>分布式事务处理 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://byteflow777.github.io/docs/data-structure/extendible-hashing-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/data-structure/extendible-hashing-table/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LevelDB</title>
      <link>https://byteflow777.github.io/docs/database-system/leveldb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://byteflow777.github.io/docs/database-system/leveldb/</guid>
      <description>LevelDB </description>
    </item>
    
  </channel>
</rss>