<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Leon' Blog</title><link>https://ileonli.github.io/</link><description>Recent content on Leon' Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 03 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ileonli.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 数据库连接 (JDBC)</title><link>https://ileonli.github.io/posts/java/language/jdbc/</link><pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/language/jdbc/</guid><description>数据库准备 Link to heading 我们创建 user 表，该表有 id、username 和 age 字段。SQL 语句如下：
create table user ( id int auto_increment primary key, username varchar(12) null, age int null ); 使用下边 SQL 语句在 user 表内插入一些数据：
insert into user values (null, &amp;#39;Tom&amp;#39;, 3), (null, &amp;#39;Jerry&amp;#39;, 4), (null, &amp;#39;Carry&amp;#39;, 4), (null, &amp;#39;Petter&amp;#39;, 3); JDBC Link to heading JDBC（Java Database Connectivity）提供了一系列访问数据库的接口，具体的实现由数据库驱动提供。接口定义在 java.sql 和 javax.sql 包中。
使用 JDBC 连接数据库并执行的流程如下：
在应用程序中添加数据库驱动，如：MySQL 和 PostgreSQL。 使用 DriverManager.getConnection 获取数据库连接。 创建用于表示 SQL 的 Statement 对象。 执行 SQL 获取 ResultSet 结果集。 使用游标（cursor）获取结果，调用 rs.</description></item><item><title>Java 模块化</title><link>https://ileonli.github.io/posts/java/language/module/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/language/module/</guid><description>Java 9 中引入了模块化，称为 Java Platform Module System，模块在包的级别上引出了更高级别的组合方式。一个 Java 模块可以指定它所包含的哪些 Java 包对其他 Java 模块可见。Java 模块还必须指定需要哪些 Java 模块来完成其工作。
使用 Java 模块有以下优势：
使用模块 Link to heading 我们使用 Maven 创建项目，项目结构如下。
untitled/ ├── pom.xml └── src ├── main │ ├── java │ │ ├── io │ │ │ └── github │ │ │ └── ileonli │ │ │ └── Main.java │ │ └── module-info.java │ └── resources └── test └── java 我们可以在 module-info.java 里设置模块名、添加或导出模块。
本项目的模块名设为：io.github.ileonli.untitled，</description></item><item><title>Java SPI 机制</title><link>https://ileonli.github.io/posts/java/language/spi/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/language/spi/</guid><description>简单使用 Link to heading 为使用 Java 操作数据库，我们需要提供驱动程序。为支持多种数据库（如：MySQL、PostgreSQL、Oracle），提供 DatabaseBaseDriver 接口。
package org.example; public interface DatabaseBaseDriver { void open(); void close(); String getName(); } 通过实现 DatabaseBaseDriver 接口，分别创建了操作 MySQL 和 PostgreSQL 数据库的驱动。
package org.example; public class MysqlDriver implements DatabaseBaseDriver { @Override public void open() { System.out.println(&amp;#34;open MySQL connection&amp;#34;); } @Override public void close() { System.out.println(&amp;#34;close MySQL connection&amp;#34;); } @Override public String getName() { return &amp;#34;mysql&amp;#34;; } } package org.example; public class PostgresqlDriver implements DatabaseBaseDriver { @Override public void open() { System.</description></item><item><title>Java 泛型</title><link>https://ileonli.github.io/posts/java/language/generic/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/language/generic/</guid><description>泛型本质即把内部数据类型参数化，可以减少额外代码的编写。
尖括号之间的叫做类型参数（type parameter），通常采用单字母，大写的方式。
类型参数常用的字母包括：E（集合框架内元素）、K（key）、V（value）、N（number）、T（type）、
public class Pair&amp;lt;K, V&amp;gt; { K k; V v; public Pair(K k, V v) { this.k = k; this.v = v; } } 泛型方法 Link to heading 泛型方法拥有独立泛型参数，可以有非静态和静态两种方式。
public class Util { // non-static method public &amp;lt;K, V&amp;gt; boolean compare(Pair&amp;lt;K, V&amp;gt; p1, Pair&amp;lt;K, V&amp;gt; p2) { return p1.k.equals(p2.k) &amp;amp;&amp;amp; p1.v.equals(p2.v); } } public class Util { // static method public static &amp;lt;K, V&amp;gt; boolean compare(Pair&amp;lt;K, V&amp;gt; p1, Pair&amp;lt;K, V&amp;gt; p2) { return p1.</description></item><item><title>Java 枚举类型</title><link>https://ileonli.github.io/posts/java/language/enum/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/posts/java/language/enum/</guid><description>枚举类型（enum type）是由一组常量组合而成
在引入枚举类型之前，通常用一组 int 常量表示每种类型。
public class Color { private static final int RED = 1; private static final int GREEN = 2; private static final int BLACK = 3; } 用 int 常量表示的方法不具有类型安全性。方法只能接收 int 类型，不同 int 值表示不同的 Color，此时无法严格控制入参，很容易出现类型错误。
public void color(int color) { // do something } Java SE 1.5 版本引用了枚举类型，使用 enum 关键字修饰。在编译期间，编译器会对枚举类型进行修改和扩展。
枚举常量（如：RED）会隐式使用 public static final 修饰（编译器修改），按照 Java 命名规范，所有名称都应该采用大写的形式。
public enum Color { RED, GREEN, BLACK; } 枚举常量可以额外增加属性，只需声明成员属性，并添加具有所有属性的构造器。</description></item><item><title>关于我</title><link>https://ileonli.github.io/about/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://ileonli.github.io/about/</guid><description>联系我 Link to heading Email: ileonli@outlook.com</description></item></channel></rss>